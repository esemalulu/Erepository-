/**
 * Contract Management & Renewal Automation
 * User Event deployed against Sales Order and Quote.
 * {
 * 		[itemid]:{
 * 			'name':'',
 * 			'recordtype':'',
 * 			'itemtype':'',
 * 			'baseprice':'',
 * 			'tier':{
 * 				'pricelevelid':{
 * 					'pricelevelname':'',
 * 					'rate':''
 * 				},
 * 				...
 * 			}
 * 		}
 * }
*/

//Company Level Preference
var paramCraErrorNotifier = nlapiGetContext().getSetting('SCRIPT', 'custscript_sb131_primaryerr'),
	paramCraCcNotifier = nlapiGetContext().getSetting('SCRIPT','custscript_sb131_ccerr'),
	paramAcctNotifier = nlapiGetContext().getSetting('SCRIPT','custscript_sb131_acctnotifier'),
	paramDefaultQuoteForm = nlapiGetContext().getSetting('SCRIPT', 'custscript_sb131_defquoteform'),
	paramNewOppFormId = nlapiGetContext().getSetting('SCRIPT','custscript_sb131_newoppform'),
	paramRenewOppFormId = nlapiGetContext().getSetting('SCRIPT','custscript_sb131_renewoppform'),
	paramRecurringItemTypes = nlapiGetContext().getSetting('SCRIPT','custscript_sb131_recuritemtypeids'),

	paramRenewalNumFromEndDate = nlapiGetContext().getSetting('SCRIPT','custscript_sb131_numdays_renewalopp'),

	paramActiveStatusId = nlapiGetContext().getSetting('SCRIPT','custscript_sb131_ctractiveid'),
	paramPendingRenewalStatusId = nlapiGetContext().getSetting('SCRIPT','custscript_sb131_ctrpendrenewid'),
	paramRenewedStatusId = nlapiGetContext().getSetting('SCRIPT','custscript_sb131_ctrrenewedid'),
	paramDelayedStatusId = nlapiGetContext().getSetting('SCRIPT','custscript_sb131_ctrexpiredid'),
	paramTerminatedStatusId = nlapiGetContext().getSetting('SCRIPT','custscript_sb131_ctrterminatedid'),

	//10/10/2016
	//Enhancement #2
	//Subsidiary Exclusion List
	paramSubsExcludeIds = nlapiGetContext().getSetting('SCRIPT','custscript_sb131_subsexclude');

//10/10/2016
//Enhancement #2
//We know that this will comma separated list of IDs.
//Remove any spaces if the value is set and run split to turn it into an array
if (paramSubsExcludeIds)
{
	//Remove extra spaces
	paramSubsExcludeIds = strGlobalReplace(paramSubsExcludeIds, ' ', '');

	//Turn it into an array
	paramSubsExcludeIds = paramSubsExcludeIds.split(',');
}
else
{
	//If not set, just simply turn it into Empty String
	paramSubsExcludeIds = [];
}


if (paramCraCcNotifier)
{
	paramCraCcNotifier = paramCraCcNotifier.split(',');
}

if (paramRecurringItemTypes)
{
	paramRecurringItemTypes = paramRecurringItemTypes.split(',');
}

/**
 * IMPORTANT:
 * itemjson is accssible via ContractMgmtAuto_Eligible_ItemJson.js Library file
 *		Attached to Client Script Record.
 *		this JSON object contains list of ALL Renewalble Items via Contract Management Module
 */

var RECORD_ACCESS_MODE = '';
/**
 * The recordType (internal id) corresponds to the "Applied To" record in your script deployment.
 * @appliedtorecord recordType
 *
 * @param {String} type Access mode: create, copy, edit
 * @returns {Void}
 */
function soQuoteOppPageInit(type)
{
	var sub = nlapiGetFieldValue('subsidiary');
	//8/3/2016 - Set record access mode on page init.
	//			 This is because other triggers do not provide this value
	//			 ONLY provided on page init.
	RECORD_ACCESS_MODE = type;

	//7/16/2016
	//Automation
	//Due to NS issue of Workflow NOT triggering User Event Script,
	//	We are using client side script to sync up billing schedule
	//	on Sales Order from Opportunity
	//	soBillSchjson is generated by aux_ue_trxCraProcessor.js user event script.
	if(sub && sub != paramSubsExcludeIds)
	{
		if (nlapiGetRecordType() == 'salesorder' && soBillSchJson)
		{
			//loop through and try syncing the value
			for (var sb in soBillSchJson)
			{
				//set it as long as line billing schedule is empty
				if (!nlapiGetLineItemValue('item', 'billingschedule', sb))
				{
					nlapiSelectLineItem('item', sb);
					nlapiSetCurrentLineItemValue('item', 'billingschedule', soBillSchJson[sb], false, true);
					nlapiCommitLineItem('item');
				}
			}
		}
	}

	//7/17/2016
	//Automation:
	//	When Opportunity loads and Contract Ref. is set with AND Contract Status is Active
	//	We automatically disable the Billing End Date Field
	//	When this happens, it means it's an Addon to existing contract
	//	- Monitor changing value in Contract Status Field
	//	  This field is set or unset based on selection of Contract Ref. Value
	//	It will Disable it ONLY if status is active AND Is Redo checkbox is NOT checked
	if (nlapiGetFieldValue('custbody_axcr_contractstatus') == paramActiveStatusId &&
		nlapiGetFieldValue('custbody_axcr_isctrredo') != 'T')
	{
		//Disable ALL Billing End Date Field on the Item line
		nlapiDisableLineItemField('item', 'custcol_contract_end_date', true);
	}
	else
	{
		//Enable ALL Billing End Date Field on the Item line
		nlapiDisableLineItemField('item', 'custcol_contract_end_date', false);
	}

	//7/16/2016
	//Validation Rule
	//Call Helper function defined below to check contract term FYI
	//fyi = Simplay Warn the User
	//save = Request Confirmation From User
	checkContractTermFyi('fyi');
}

/**
 * The recordType (internal id) corresponds to the "Applied To" record in your script deployment.
 * @appliedtorecord recordType
 *
 * @returns {Boolean} True to continue save, false to abort save
 */
function soQuoteOppSaveRecord()
{

	//ONLY for custbody_axcr_iscratrx == checked (CRA related transactions)
	//For all deployed trx record, if End Company field is NOT set, warn the user

	if (nlapiGetFieldValue('custbody_axcr_iscratrx') == 'T' || nlapiGetFieldValue('custpage_linechanged') == 'T')
	{
		//TODO: Need to find out WHY workflow is hiding this
		//For the time being, default end company to match billing entity
		if (!nlapiGetFieldValue('custbody_end_customer'))
		{
			nlapiSetFieldValue('custbody_end_customer', nlapiGetFieldValue('entity'));
		}

		//8/3/2016
		//Validation Rule: If user is creating NEW opportunity and decides to do add on against
		//	Contract at Pending Renewal Status, DO NOT LET THEM SAVE
		if (RECORD_ACCESS_MODE == 'create' &&
			nlapiGetFieldValue('custbody_axcr_contractstatus') == paramPendingRenewalStatusId)
		{
			var goToRenewalOpp = confirm(
									'CONFIRM: You are attempting to add on to Contract that is Pending Renewal. \n\n'+
									'Please use '+nlapiGetFieldText('custbody_axcr_latestrenewalopp')+' '+
									'already generated for renewal. \n\n'+
									'Would you like to go directly to '+
									nlapiGetFieldText('custbody_axcr_latestrenewalopp')+'?\n\n'+
									'Click "Ok" to go to Renewal Opportunity'
								 );

			//Take the user directly to the latest renewal opportunity if they clicked OK
			if (goToRenewalOpp)
			{
				var renewalOppUrl = nlapiResolveURL(
										'RECORD',
										'opportunity',
										nlapiGetFieldValue('custbody_axcr_latestrenewalopp'),
										'EDIT'
									);
				window.ischanged = false;
				window.location.href = 'https://'+window.location.hostname+renewalOppUrl;

				return false;
			}
			else
			{
				alert('ERROR: You will NOT be allowed to save this opportunity due to open renewal opportunity.');
				return false;
			}
		}

		//7/15/2016
		//Validation Rule: Contract Terms In Months
		//	If this is a NEW Opportunity to create NEW Contract,
		//	We need to make sure Contract Terms in Months value is provided
		//	custbody_axcr_contractterm
		//	Logic: If Contract Reference is NOT SET (custbody_axcr_contractreference)
		//			AND
		//		   This Opportunity IS CRA Eligible Trx (custbody_axcr_iscratrx)
		//			AND
		//		   Contract Terms in Months is EMPTY (custbody_axcr_contractterm)

		//9/19/2016
		//Validation to ONLY fire when status is set to Closed - Won (13)

		if (nlapiGetFieldValue('entitystatus') == '13' && //Entity status is set to Closed - Won
			nlapiGetFieldValue('custbody_axcr_iscratrx') == 'T' && //Is CRA Eligible
			!nlapiGetFieldValue('custbody_axcr_contractterm') ) // Contract Term
		{
			alert(
				'ERROR: This will create New Contract. You MUST Provide '+
				'Contract Terms in Months'
			);

			return false;
		}

		//7/15/2016
		//Validation Rule: Billing Start/End Date Check
		//	If This is a CRA Eligible Trx and One/More Renewable Item Line
		//	is missing Billing Start/End Dates OR Annual Renewal Amount,
		//	It needs to throw Error
		//	Logic: If IS CRA Eliglbel Trx is Checked (custbody_axcr_iscratrx)
		//			 AND
		//		   Line Item has Renewing Item CHECKED (custcol_axcr_iscrarenewingitem)
		//			 AND
		//		   (
		//			  Lines' Annual Renewal Amount is EMPTY
		//				OR
		//			  Billing Start Date is EMPTY
		//				OR
		//			  Billing End Date is EMPTY
		//		   )

		//Validation Rule: ALL Renewing Lines Billing End Date MUST BE THE SAME
		//	Logic: Each Renewable (CRA Eligible Lines MUST have Same Billing End dates)

		if (nlapiGetFieldValue('custbody_axcr_iscratrx') == 'T')
		{
			//Check for Same Billing End Date
			var checkBillEndDate = '';

			//Loop through each line item to run above logic against each line
			for (var l=1; l <= nlapiGetLineItemCount('item'); l+=1)
			{
				//Only check against renewing line item
				if (nlapiGetLineItemValue('item','custcol_axcr_iscrarenewingitem', l) == 'T')
				{
					//9/19/2016
					//Validation Rule:
					//	Only check if Sales Order OR Opportunity status is Closed - Won
					if (nlapiGetRecordType() == 'salesorder' ||
						(nlapiGetRecordType() == 'opportunity' && nlapiGetFieldValue('entitystatus') == '13'))
					{
						console.log('Line '+l+' OFA: '+nlapiGetLineItemValue('item', 'custcol_axcr_origfullamount', l));
						//Check to see if this line has Annual Renewal Amount Set
						if (!nlapiGetLineItemValue('item', 'custcol_axcr_origfullamount', l))
						{
							alert('ERROR: Line '+l+' is Renewing Item. You MUST Provide value for Annual Renewal Amount Column');
							return false;
						}

						//Check to see if this line is missing billing start or end date
						if (!nlapiGetLineItemValue('item', 'custcol_contract_start_date', l) ||
							!nlapiGetLineItemValue('item', 'custcol_contract_end_date', l))
						{
							alert('ERROR: Line '+l+' is Renewing Item. You MUST provide value for Billing Start AND End Dates');
							return false;
						}
					}

				}//End Check for Renewing Line

				//Check against all CRA line item for matching end dates
				//	We do this check here because even if the line item is not renewing
				//	It can have billing start and End Date
				if (nlapiGetLineItemValue('item','custcol_axcr_iscraitem', l) == 'T')
				{

					//Date Validation:
					//	Logic: Both Start and End Date must be present NOT JUST ONE
					if (
						(
							!nlapiGetLineItemValue('item', 'custcol_contract_start_date', l) &&
							nlapiGetLineItemValue('item', 'custcol_contract_end_date', l)
						)
						||
						(
							nlapiGetLineItemValue('item', 'custcol_contract_start_date', l) &&
							!nlapiGetLineItemValue('item', 'custcol_contract_end_date', l)
						)
					   )
					{
							alert('ERROR: Line '+l+' If you are providing Billing dates, you MUST provide Both');
							nlapiDisableLineItemField('item', 'custcol_contract_end_date', false);
							return false;
					}

					//As long as there is billing end date continue
					if (nlapiGetLineItemValue('item', 'custcol_contract_end_date', l))
					{
						//Check for matching billing end Date
						if (!checkBillEndDate)
						{
							//variable is empty. This means it's the first line or it has not encountered one yet
							checkBillEndDate = nlapiGetLineItemValue('item', 'custcol_contract_end_date', l);
						}
						else
						{
							if (nlapiGetLineItemValue('item', 'custcol_contract_end_date', l) != checkBillEndDate)
							{
								alert(
									'ERROR: Line '+l+' have different Billing End Date compared to Others.  \n '+
									'Billing End Date MUST match for ALL Renewable/CRA Eligible Items'
								);

								return false;
							}
						}
					}
				}//End check for

			}//End Line For loop
		}

		//7/17/2016
		//Validation Rule
		//Before saving the record, we need to see if we need to warn the user
		//whether this opportunity has already missed the renewal process.
		//	This can happen when End Date is within the Renewal Process Days specified
		//	in Company Preferences. As of now set to 120 days.
		//	Logic:
		//		If line contains Renewing Items
		//			AND
		//		Billing End Date - [Renewal Process Days (120 Days)] is <= to TODAY
		//	We FYI the User that once SO is processed, it will automatically generate
		//	Next Renewal Opportunity.

			//Grab the first matching line that has renewing item.
			//	If it is renewing it MUST already have end date set.
			//	Previous validation would have already done billing end date being same.
			//	We just need to grab first found.

		var	matchLineNum = nlapiFindLineItemValue('item', 'custcol_axcr_iscrarenewingitem', 'T');

		//ONLY Do this when there IS a line with renewing item
		if (matchLineNum > -1)
		{
			var	checkBillEndDate = nlapiGetLineItemValue('item', 'custcol_contract_end_date', matchLineNum);

			//9/19/2016
			//Validation Rule Change
			//	Since we are allowing user to do save without date fields until Status is marked to Closed - Won
			//	we are ONLY running below check if bill date is filled in

			if (checkBillEndDate)
			{
				var	renewProcDate = nlapiAddDays(nlapiStringToDate(checkBillEndDate), (-1 * parseInt(paramRenewalNumFromEndDate)));

				if (renewProcDate <= new Date() )
				{
					var renewConf = confirm(
										'CONFIRM: Billing End Date of '+checkBillEndDate+' is within '+
										paramRenewalNumFromEndDate+' days renewal processing window and miss renewal processing. \n\n'+
										'When Sales Order is process, System will generate '+
										'Renewal Opportunity automatically \n\n'+
										'Are you sure you want to continue?'
									);

					if (!renewConf)
					{
						return false;
					}
				}
			}

		}

		//7/18/2016
		//Validation Rule
		//If the user is saving the Transaction AND
		//	Contract Ref is Set AND Is Contract Redo CHECKED,
		//	we are going notify the user of what this action means
		if (nlapiGetFieldValue('custbody_axcr_contractreference') &&
			nlapiGetFieldValue('custbody_axcr_isctrredo') == 'T')
		{
			var redoConf = confirm(
								'CONFIRM: You attempting to Re-Do Previously created Contract.\n\n'+
								'Make sure FULL Asset Return process is executed and ALL Assets under Contract '+
								nlapiGetFieldText('custbody_axcr_contractreference')+
								' is Marked as CANCELLED!!! \n\n'+
								'Are you Sure you want to continue?'
						   );

			if (!redoConf)
			{
				return false;
			}
		}


		//10/28/2016
		//Contract Reference Rule
		// If is CONTRACT REDO is CHECKED and Contract REF is empty throw and error and return false.
		if (!nlapiGetFieldValue('custbody_axcr_contractreference') && nlapiGetFieldValue('custbody_axcr_isctrredo') == 'T')
		{
			alert('If you wish to redo the contact you must provide a contract reference.');
			return false;
		}



		//7/16/2016
		//Validation Rule
		//Call Helper function defined below to check contract term FYI
		//fyi = Simplay Warn the User
		//save = Request Confirmation From User
		//
		//This should be done at the very end of On Save Function
			//Validation Confirm
			//If this is renewing Opportunity and the earliest start date is
			//	AFTER current contract term end date
			//	We need to WARN the user and have them CONFIRM to continue.
			//	Warning WILL Include how THIS action WILL RE-CALCULATE
			//	Related Contracts' Term Start and End date based on Term in Month
			//	Provided in THIS form
		if (!checkContractTermFyi('save'))
		{
			return false;
		}

		//10/6/2016
		//Validation Rule
		//Once all validation and Confirm/FYI is shown to user,
		//We show final CONFIRM window to let the user know that
		//Saving record will create opportunity
		//Script triggered ONLY if original and new status value does not match
		//	and new value of entity status is closed - won
		if (
			nlapiGetFieldValue('custpage_origoppstatus') != nlapiGetFieldValue('entitystatus') &&
			nlapiGetFieldValue('entitystatus') == '13'
		   )
		{
			var confSo = confirm(
							'CONFIRM: Saving this Opportunity with status of Closed - Won '+
							'WILL create a Sales Order and lock this Opportunity from further edits.'+
							'\n\n'+
							'If you do not wish to continue, click Cancel. \n'+
							'Click OK to Proceed.'
						 );

			if (!confSo)
			{
				return false;
			}
		}

	}

	return true;
}


/**
 * The recordType (internal id) corresponds to the "Applied To" record in your script deployment.
 * @appliedtorecord recordType
 *
 * @param {String} type Sublist internal id
 * @param {String} name Field internal id
 * @param {Number} linenum Optional line item number, starts from 1
 * @returns {Void}
 */
function soQuoteOppFieldChanged(type, name, linenum)
{
	if (nlapiGetRecordType() == 'opportunity' || nlapiGetRecordType() == 'salesorder')
	{
		//alert(type+' // '+nlapiGetCurrentLineItemValue('item','item'));
		//Track if line item has been changed
		if (type=='item')
		{

			nlapiSetFieldValue('custpage_linechanged','T',true,true);

			//7/15/2016
			//Automation:
			//		If user fills out Billing Start Date field,
			//		AND
			//		Billing End Date is Empty
			//		==>
			//		Contract Status is NOT ACTIVE
			//			** When Contract Status is Active, it is Add on
			//			   Billing End Date should be auto set to Contract Anniversary Date
			//
			//		If Contract Status IS Active,
			//			** Default the End Date to Contract Anniversary Date

			//		Run courtesy calculation for Billing Start Date + 12 Months - 1 Day
			if (name=='custcol_contract_start_date' &&
				nlapiGetCurrentLineItemValue('item','custcol_contract_start_date') &&
				!nlapiGetCurrentLineItemValue('item','custcol_contract_end_date'))
			{
				if (nlapiGetFieldValue('custbody_axcr_contractstatus') != paramActiveStatusId)
				{
					//Add 12 months from start date
					var oneYearEndDate = nlapiAddMonths(
											nlapiStringToDate(
												nlapiGetCurrentLineItemValue('item','custcol_contract_start_date')
											),
											12
										 );
					//Subtract one day
					oneYearEndDate = nlapiDateToString(
										nlapiAddDays(oneYearEndDate, -1)
									 );

					//Set the end date value
					nlapiSetCurrentLineItemValue('item', 'custcol_contract_end_date', oneYearEndDate, false, true);
				}
				else
				{
					//It is Set to Active and default the end date to Contract Anniversary Date
					nlapiSetCurrentLineItemValue(
						'item',
						'custcol_contract_end_date',
						nlapiGetFieldValue('custbody_axcr_contractanivdate'),
						false,
						true
					);
				}

			}

		}

		//7/16/2016
		//Automation:
		//	If Contract Term Sourced or Contract Uplift fields change
		//	We need to sync the values to Actual Terms in Months and Actual Uplift % fields
		if (nlapiGetRecordType() == 'opportunity')
		{
			if (name == 'custbody_axcr_hiddenctrtermsourced' ||
				name == 'custbody_axcr_hiddenctrupliftsourced')
			{
				var fldToSync = 'custbody_axcr_contractterm';
				if (name == 'custbody_axcr_hiddenctrupliftsourced')
				{
					fldToSync = 'custbody_axcr_upliftperc';
				}

				//sync to actual fields
				nlapiSetFieldValue(fldToSync, nlapiGetFieldValue(name), false, true);

				//Revalidate the term
				checkContractTermFyi('fyi');
			}
		}

		//7/17/2016
		//Automation:
		//	When user selects Contract Ref. AND Contract Status is Active
		//	We automatically disable the Billing End Date Field
		//	When this happens, it means it's an Addon to existing contract
		//	- Monitor chaning value in Contract Status Field
		//	  This field is set or unset based on selection of Contract Ref. Value
		if (name == 'custbody_axcr_contractstatus')
		{
			//It will Disable it ONLY if status is active AND Is Redo checkbox is NOT checked
			if (nlapiGetFieldValue(name) == paramActiveStatusId &&
				nlapiGetFieldValue('custbody_axcr_isctrredo') != 'T')
			{
				//Disable ALL Billing End Date Field on the Item line
				nlapiDisableLineItemField('item', 'custcol_contract_end_date', true);
			}
			else
			{
				//Enable ALL Billing End Date Field on the Item line
				nlapiDisableLineItemField('item', 'custcol_contract_end_date', false);
			}
		}

		//7/17/2016
		//Automation:
		//	This automation is similar to above BUT
		//	it monitors changing of contract Anniversary date.
		//	If contract ref is set and status is active,
		//	since previous automation will disable the billing end date field,
		//	We need to go through and resync billing end date to All Existing lines
		if (name == 'custbody_axcr_contractanivdate' &&
			nlapiGetFieldValue(name) &&
			nlapiGetFieldValue('custbody_axcr_contractstatus') == paramActiveStatusId)
		{
			//loop through each line and see if we need to resync billing end date
			for (var si=1; si <= nlapiGetLineItemCount('item'); si+=1)
			{
				var curBillEndDt = nlapiGetLineItemValue('item', 'custcol_contract_end_date', si),
					ctrAnvDt = nlapiGetFieldValue(name);

				//8/12/2016
				// We Need to do this ONLY for those that are recurring
				if (curBillEndDt != ctrAnvDt &&
					nlapiGetLineItemValue('item','custcol_axcr_iscrarenewingitem', si) == 'T')
				{
					nlapiSetLineItemValue('item', 'custcol_contract_end_date', si, ctrAnvDt);
				}
			}
		}

		//7/18/2016
		//Automation:
		//	If the user checks the box CR-Is Contract Redo,
		//	We need to make sure to re-enable contract end date, term and uplift field
		// 	As if this is new entry.
		//	System will only allow specific roles to access this field (Defined on the custbody field level)
		if (name == 'custbody_axcr_isctrredo')
		{
			if (nlapiGetFieldValue(name)=='T')
			{
				//Enable ALL Billing End Date Field on the Item line
				nlapiDisableLineItemField('item', 'custcol_contract_end_date', false);
				nlapiDisableField('custbody_axcr_contractterm', false);
				nlapiDisableField('custbody_axcr_upliftperc', false);
			}
			else
			{
				//Disable ALL Billing End Date Field on the Item line
				nlapiDisableLineItemField('item', 'custcol_contract_end_date', true);
				nlapiDisableField('custbody_axcr_contractterm', true);
				nlapiDisableField('custbody_axcr_upliftperc', true);
			}
		}

		//10/14/2016
		//Automation
		//If user sets contract reference on CREATE, force currency to match contract currency
		//we also disable the currency drop down box.
		//in Edit mode, currency is NOT editable by default because it will have
		//estimate linked to it.
		//RECORD_ACCESS_MODE
		if ((name == 'custbody_axcr_contractcurrency' || name == 'custbody_axcr_isctrredo') &&
			RECORD_ACCESS_MODE == 'create')
		{
			if (nlapiGetFieldValue('custbody_axcr_contractcurrency'))
			{
				nlapiSetFieldValue('currency', nlapiGetFieldValue('custbody_axcr_contractcurrency'), true, true);
			}

			if (nlapiGetFieldValue('custbody_axcr_contractcurrency') &&
				nlapiGetFieldValue('custbody_axcr_isctrredo') != 'T')
			{
				//disable the currency field as long as contract redo is
				nlapiDisableField('currency', true);
			}
			else
			{
				nlapiDisableField('currency', false);
			}
		}
		//We also need to make sure currency opens up if contract ref is cleared
		if (name == 'custbody_axcr_contractreference' &&
			!nlapiGetFieldValue(name))
		{
			nlapiDisableField('currency', false);
		}

		//7/18/2016
		//Automation
		//If this box is checked, we can assume the user has access to contract record.
		//Grab the most recent Opportunity on this contract
		//	and Open up the Opportunity in New window for reference purposes.
		//8/3/2016
		//	Modification added to make sure the Opportunity popup works for all
		//	use cases. User can set redo box first before selecting the contract
		if (name == 'custbody_axcr_isctrredo' ||
			name == 'custbody_axcr_contractreference')
		{

			if (nlapiGetFieldValue('custbody_axcr_contractreference') &&
				nlapiGetFieldValue('custbody_axcr_isctrredo')=='T')
			{
				//Instead of look up, use custbody_axcr_latestappropp
				//	Just incase we have permission issue
				var recentOppId = nlapiGetFieldValue('custbody_axcr_latestappropp');

				if (recentOppId)
				{
					//Open the previous Opportunity for Reference in new window
					//	This is a courtesy to user to easily reference what was on the previous Opp.
					//	to easily recreate the Redo opportunity
					//8/3/2016 - Need to make sure the window is resziable.
					window.open(
						nlapiResolveURL('RECORD', 'opportunity', recentOppId, 'VIEW'),
						'Most_Recent_Opportunity',
						'status=1,toolbar=0,location=0,menubar=0,resizable=1,width=1024,height=750'
					);
				}

			}

		}

	}//Opportunity/Sales Order Specific Changes
}

/**
 * Added 7/15/2016
 * @param type
 */
function soQuoteOppRecalc(type)
{

	//For Opportunity, Each time line changes, check to see if this Opportunity or SalesOrder is
	//		STILL CRA Eligible Transaction

	//7/15/2016
	//Automation:
	//		If this item is CRA Eligible Item
	//		Check "custcol_axcr_iscraitem' column field
	//			- If the Item Type is one of recurring item type,
	//				Check custcol_axcr_iscrarenewingitem as well

	//		If NOT, check it both custcol_axcr_iscraitem and custcol_axcr_iscrarenewingitem OFF
	//			- If the line isn't CRA item, we don't care if it's recurring or not
	//	This Check is executed ONLY for Item value change
	if (nlapiGetRecordType() == 'opportunity' || nlapiGetRecordType() == 'salesorder')
	{
		if (type == 'item')
		{
			//After Each line is modified, we loop through all lines and see if this is STILL a CRA Eligible Transaction
			var isStillCraTrx = false;
			for (var cac=1; cac <= nlapiGetLineItemCount('item'); cac+=1)
			{

				//We ignore setting values for Item Groups
				if (nlapiGetLineItemValue('item', 'itemtype',cac) == 'Group' ||
					nlapiGetLineItemValue('item', 'itemtype',cac) == 'EndGroup')
				{
					continue;
				}

				//Check the item and see if it exists as CRA Eligibale item mapping
				if (itemjson[nlapiGetLineItemValue('item','item', cac)])
				{
					isStillCraTrx = true;

					//Set is CRA Item box
					nlapiSetLineItemValue('item','custcol_axcr_iscraitem',cac, 'T');

					//paramRecurringItemTypes is company preference..
					//	- This is comma separated list of Item Type IDs
					if (paramRecurringItemTypes.contains(itemjson[nlapiGetLineItemValue('item','item', cac)].itemtype))
					{
						//Set is renewing item
						nlapiSetLineItemValue('item','custcol_axcr_iscrarenewingitem',cac, 'T');
					}
					else
					{
						nlapiSetLineItemValue('item','custcol_axcr_iscrarenewingitem',cac, 'F');
					}
				}
				else
				{
					//Turn both flags off
					nlapiSetLineItemValue('item','custcol_axcr_iscraitem',cac, 'F');
					nlapiSetLineItemValue('item','custcol_axcr_iscrarenewingitem',cac, 'F');
				}
			}

			//Check the box custbody_axcr_iscratrx if this is still CRA Transaction
			if (isStillCraTrx)
			{
				nlapiSetFieldValue('custbody_axcr_iscratrx','T',true,true);
			}
			else
			{
				nlapiSetFieldValue('custbody_axcr_iscratrx','F',true,true);
			}
		}
	}//End Check against Opportunity/SalesOrder

	//7/16/2016
	//Validation Rule
	//Call Helper function defined below to check contract term FYI
	//fyi = Simplay Warn the User
	//save = Request Confirmation From User
	checkContractTermFyi('fyi');
}

/************ Helper Functions *********************/
/**
 * @param _action
 * 	fyi:
 * 		Simply display Warning to user and disable/enable term field
 *
 *  save:
 *  	Request Confirmation from User if it matches criteria
 */
function checkContractTermFyi(_action)
{

	//Upon Recalc, review and alert the User If we need to
	//	Display Contract Term Related Message
	//	and Disable/Enable contract term and uplift % field
	//	This is same code executed on Page Initi
	if (nlapiGetRecordType() == 'opportunity')
	{

		//7/16/2016
		//Automation Rule:
		// For Opportunity ONLY
		//	If we have Contract Ref. Set
		//	- Disable "Contract Term in Months" (custbody_axcr_contractterm) Field.
		//	  This is because we don't want this value being changed on renewal by Sales Rep
		//
		//  Other wise, enable the two fields
		if (!nlapiGetFieldValue('custbody_axcr_contractreference'))
		{
			if (_action=='fyi')
			{
				nlapiDisableField('custbody_axcr_contractterm', false);
				nlapiDisableField('custbody_axcr_upliftperc', false);
			}

			return true;
		}

		if (nlapiGetFieldValue('custbody_axcr_contractreference'))
		{
			//7/18/2016
			//Logic Change
			//	Disabling of Terms and Uplif ONLY if Is Redo box is NOT checked.
			//	Redo box can be check if Finance is redoing the contract process
			if (_action=='fyi' &&
				nlapiGetFieldValue('custbody_axcr_isctrredo') != 'T')
			{
				nlapiDisableField('custbody_axcr_contractterm', true);
				nlapiDisableField('custbody_axcr_upliftperc', true);
			}

			//7/16/2016
			//Automation Rule:
			// For Opportunity ONLY
			//	If Opportunity Already has Contract Ref. Set
			//		AND
			//	Linked Contract Status is Pending Renewal Or Renewal Delayed
			//		AND
			//	Existing Line Items Minimum Billing Start Date is AFTER Contract Term End Date
			//	- We Alert the user that the Contract Term Ended and you need to review New Contract Terms
			//	- ENABLE the Contract Terms In Months Field
			if (
				nlapiGetFieldValue('custbody_axcr_contractstatus') == paramPendingRenewalStatusId ||
				nlapiGetFieldValue('custbody_axcr_contractstatus') == paramDelayedStatusId
			   )
			{
				var bStartDate = null;
				for (var l=1; l <= nlapiGetLineItemCount('item'); l+=1)
				{
					//Grab the Earliest Billing Start Date
					if (
						nlapiGetLineItemValue('item','custcol_contract_start_date', l) &&
						(
							!bStartDate ||
							nlapiStringToDate(nlapiGetLineItemValue('item','custcol_contract_start_date', l)) <= bStartDate
						)
					   )
					{
						//set ctStartDate as Date object
						bStartDate = nlapiStringToDate(nlapiGetLineItemValue('item','custcol_contract_start_date', l));
					}
				}
				//Check to see if we need to alert the user and enable the Contract Terms in Months
				if (bStartDate &&
					nlapiGetFieldValue('custbody_axcr_contracttermenddt') &&
					bStartDate >= nlapiStringToDate(nlapiGetFieldValue('custbody_axcr_contracttermenddt')))
				{
					if (_action=='fyi')
					{
						alert(
							'FYI: Previous Contract Term has Ended. \n'+
							'This Renewal Opportunity has Earliest Billing Start Date of '+
							nlapiDateToString(bStartDate)+
							' and Contract Term End Date is '+
							nlapiGetFieldValue('custbody_axcr_contracttermenddt')+
							'\n\n'+
							'Make sure you Review New Contract Terms In Months AND '+
							'new Contract Uplift % for This Opportunity \n\n'+
							'WARNING: System WILL Recalculate New Term End Date When Processed!!!'
						);

						//Enable the Contract Term Field
						nlapiDisableField('custbody_axcr_contractterm', false);
						nlapiDisableField('custbody_axcr_upliftperc', false);
					}
					else
					{
						var usrConf = confirm(
										'FYI: Previous Contract Term has Ended. \n'+
										'This Renewal Opportunity has Earliest Billing Start Date of '+
										nlapiDateToString(bStartDate)+
										' and Contract Term End Date is '+
										nlapiGetFieldValue('custbody_axcr_contracttermenddt')+
										'\n\n'+
										'Have you validated New Contract Terms In Months AND '+
										'new Contract Uplift % for This Opportunity? \n\n'+
										'WARNING: System WILL Recalculate New Term End Date When Processed!!!'
									  );

						if (!usrConf)
						{
							return false;
						}
					}

				}//Display FYI Warning/Confirm
			}//Pending Renewal Or Delayed Check
		}
	}

	return true;

}
