
var SW_ADDON_TAG = 'Origin = Addon';
var WEBSITE_TAG = 'Origin = Webform';  // [Updated by Robert Gama: 2012-10-19 with new website tag]
var PARDOT_TAG = 'Full Prospect Details';

var ORIGIN_WEB_FORM = -5;  // Internal ID of Case Origin Type for Webform
var ORIGIN_SW_ADDON = 4; // Internal ID of Case Origin Type for SW Addon
var ORIGIN_PARDOT = 5;  // Internal ID of Case Origin Type for Pardot
var ORIGIN_EMAIL = 1;
var ORIGIN_PHONE = 2;

var FIELD_ORIGIN = 'origin';
var FIELD_PRIORITY = 'priority';
var FIELD_PRODUCT = 'custevent_caseproduct';
var FIELD_INBOUNDEMAIL = 'inboundemail';
var FIELD_INCOMINGMESSAGE = 'incomingmessage';

//var productValue = '';  // TBD - Will use to set the product fielt
//var serialNumberValue = ''; // TBD - Will use to enter serial number
//var priorityValue = '';  // TBD - Populate the case priority for form cases

//  Priority internal IDs for case Priority List ('priority')
var PRIORITY_CRITICAL = 4;
var PRIORITY_HIGH = 1;
var PRIORITY_MEDIUM = 2;
var PRIORITY_LOW = 3;
var PRIORITY_QUESTION = 5;

//  Product internal IDs for Product List ('customlist_supproduct') used in field: custevent_caseproduct
var PRODUCTS_SOLIDWORKS = 6;
var PRODUCTS_EPDM = 4;
var PRODUCTS_WPDM = 7;
var PRODUCTS_SIMULATION = 1;
var PRODUCTS_3DVIA = 9;
var PRODUCTS_E3 = 3;
var PRODUCTS_OBJET = 8;
var PRODUCTS_DRIVEWORKS = 2;
var PRODUCTS_PROPERTYLINKS = 5;
var PRODUCTS_PLANTWORKS = 10;
var PRODUCTS_OTHER = 11;

//  Case priority array and their corresponding internal ID values - OREDER IS IMPORTANT - DO NOT CHANGE ORDER
var casePriorities = ['High', 'Medium', 'Low', 'Critical', 'Question'];
var netsuitePriorityIDs = [PRIORITY_HIGH, PRIORITY_MEDIUM, PRIORITY_LOW, PRIORITY_CRITICAL, PRIORITY_QUESTION];

//var addOnProducts = ["SolidWorks Standard, Professional, or Premium", "SolidWorks Enterprise PDM (EPDM)", "SolidWorks Workgroup PDM (WPDM)", "SolidWorks Simulation", "3DVIA Composer", "E�.Series or E�.WireWorks", "Objet 3D Printer", "DriveWorks", "PropertyLinks", "PlantWorks", "Other product"];
var addOnProducts = ["SolidWorks", "EPDM", "WPDM", "Simulation", "3DVIA Composer", "E3.WireWorks", "Objet", "DriveWorks", "PropertyLinks", "PlantWorks", "Other"];
var websiteProducts = ["SolidWorks", "EPDM", "WPDM", "Simulation", "3DVIA Composer", "E3.WireWorks", "Objet", "DriveWorks", "PropertyLinks", "PlantWorks", "Other"];
var netsuiteProductIDs = [PRODUCTS_SOLIDWORKS, PRODUCTS_EPDM, PRODUCTS_WPDM, PRODUCTS_SIMULATION, PRODUCTS_3DVIA, PRODUCTS_E3, PRODUCTS_OBJET, PRODUCTS_DRIVEWORKS, PRODUCTS_PROPERTYLINKS, PRODUCTS_PLANTWORKS, PRODUCTS_OTHER];

function afterSubmitOriginFinding(type){
   log("Type", type);
    if (type == 'create') {
        log('Create', 'Message');
        var caseID = nlapiGetRecordId();
        var message = nlapiGetFieldValue(FIELD_INCOMINGMESSAGE);
		var inboundEmail = nlapiGetFieldValue(FIELD_INBOUNDEMAIL);
        var initOrigin = nlapiGetFieldValue(FIELD_ORIGIN);  // Gets the initial case origin
		var newOrigin = initOrigin;  // Temporarily initialize newOrigin to the original
		var isFromAutoGeneratedSource = false;  // Variable to identify case from an autogenerated source (website, addon, Pardot)  extract and update case fields
		var isSupportCase = true;
		
        //Check Incoming Message - Debug output message
        log('message detail', message);
		
		//Check if the case origin is phone
		if (!(initOrigin == ORIGIN_PHONE)) {
		
			//Check if message came from SolidWorks Addon
			if (isMessageFromSwAddon(message)) {
				log('SolidWorks Addon','Found ' + SW_ADDON_TAG + ' tagging in the message');
				isFromAutoGeneratedSource = true;
				//Check The Origin set on the Support Case
				if (initOrigin != ORIGIN_SW_ADDON) {  
					newOrigin = ORIGIN_SW_ADDON;
				}
			}
			//Check if message came from Online Webform
			else if (isMessageFromOnlineForm(message)) {
				log('Website Form','Found ' + WEBSITE_TAG + ' tagging in the message');
				isFromAutoGeneratedSource = true;
				//Check The Origin set on the Support Case
				if (initOrigin != ORIGIN_WEB_FORM) {  
					newOrigin = ORIGIN_WEB_FORM;
				} 
			}
			//Check if message came from Pardot
			else if (isMessageFromPardot(message)) {
				log('Pardot Lead','Found ' + PARDOT_TAG + ' tagging in the message');
				isFromAutoGeneratedSource = true;
				isSupportCase = false;
				//Check The Origin set on the Support Case
				if (initOrigin != ORIGIN_PARDOT) {  
					newOrigin = ORIGIN_PARDOT;
				}
			}
			//Set the product by inboundEmailAddress
			else {
				setCaseFieldValue(FIELD_PRODUCT, getProductByInboundEmail(inboundEmail), caseID);  
			}
		}
		
		//Check if message came from SolidWorks Addon OR Online Webform
		if (isFromAutoGeneratedSource) {
			setCaseFieldValue(FIELD_ORIGIN, newOrigin, caseID);
			
			if (isSupportCase) {
				setCaseFieldValue(FIELD_PRIORITY, getPriorityValue(message, newOrigin), caseID);
				setCaseFieldValue(FIELD_PRODUCT, getProductValue(message, newOrigin), caseID);
			}
			else {
				// Fill in sales lead defaults later
			}
		}
    }
}

function getProductByInboundEmail(inboundEmailAddress) {
	var emailName = (inboundEmailAddress) ? inboundEmailAddress.replace("@javelin-tech.com","") :  'noEmail' ;
	var productID = PRODUCTS_SOLIDWORKS;
	switch (emailName) {
		case 'dasupport':
			productID = PRODUCTS_DRIVEWORKS;
			break;
		case 'e3support':
			productID = PRODUCTS_E3;
			break;
		case 'plmsupport':
			productID = PRODUCTS_EPDM;
			break;
		case 'rpsupport':
			productID = PRODUCTS_OBJET;
			break;
		default:
			productID = PRODUCTS_SOLIDWORKS;
	}
	log('getProductByInboundEmail', 'Parsed inbound email address (' + inboundEmailAddress + ') to ' + emailName + ', Now setting product to:  ' + productID);
	return productID;
}	
function log(title, details) {
	nlapiLogExecution('DEBUG',title,details);
}

/*  parseValue : function uses Regular Expression (Regex) to get the value after the strValueName in the message 
	Regular expression exlanation:
		strValueName + .....................................Means look for the value of the variable strValueName
		' = ([A-Z3][a-zA-Z\. 3]+)...........................Means after previous match space = space then a capital letter or a 3
															followed by one or more upper or lower case letters, spaces, periods or a 3.
		[\\n\\r]+'..........................................Means previous must be followed by one or more new lines or line returns.
*/
function parseValue(msg, strValueName) {
	//log('parseValue', msg + '\t\t\n' + strValueName);
	var myRegexp = new RegExp(strValueName + ' = ([A-Z3][a-zA-Z\. 3]+)[\\n\\r]+', 'gm');
	log('parseValue', 'myRegexp = ' + myRegexp.toString());
	var match = myRegexp.exec(msg);
	log('parseValue', 'returning match = ' + match[1] );
	return match[1];
}

function getPriorityValue(msg, caseOrigin) {
	var casePriority = parseValue(msg, 'Priority');
	//log('getPriorityValue', 'Result of parseValue = ' + casePriority);
	if (caseOrigin == ORIGIN_WEB_FORM) {
		//log('getPriorityValue', 'case origin  = ' + ORIGIN_WEB_FORM);
		//log('getPriorityValue', 'Returning Priority = ' + casePriority.replace('Priority ',''));
		return netsuitePriorityIDs[casePriorities.indexOf(casePriority.replace('Priority ',''))];  // Webform value are like:  Priority = Priority Low
	}
	else if (caseOrigin == ORIGIN_SW_ADDON) {
		return netsuitePriorityIDs[casePriorities.indexOf(casePriority)];  // Add on values are like:  Priority = Low
	}
	else {
		return PRIORITY_LOW;
	}
}

function getProductValue(msg, caseOrigin) {
	var caseProduct = parseValue(msg, 'Product');
	//log('getPriorityValue', 'Result of parseValue = ' + caseProduct);
	if (caseOrigin == ORIGIN_WEB_FORM) {
		return netsuiteProductIDs[websiteProducts.indexOf(caseProduct)]; 
	}
	else if (caseOrigin == ORIGIN_SW_ADDON) {
		return netsuiteProductIDs[addOnProducts.indexOf(caseProduct)]; 
	}
	else {
		return PRODUCTS_OTHER;
	}
}

function setCaseFieldValue(fieldID, fieldValue, caseID) {
	log('Setting case ' + fieldID, 'Setting case ' + fieldID + ' to  = ' + fieldValue + ' for case internal ID = ' + caseID);
	nlapiSubmitField('supportcase', caseID, fieldID, fieldValue);
}

/**  isMessageFromSwAddon:  Function to test if message is from SolidWorks Addon
 * Checks to see if incoming message contains SolidWorks Addon tag
 * Origin = Addon
 */
function isMessageFromSwAddon(msg) {
	return msg.indexOf(SW_ADDON_TAG) != -1;
}

/**  isMessageFromOnlineForm:  Function to test if message is from Website
 * Checks to see if incoming message contains website tag
 * Origin = Web form
 */
function isMessageFromOnlineForm(msg){
	return msg.indexOf(WEBSITE_TAG) != -1;
}

/**  isMessageFromPardot:  Function to test if message is from Pardot
 * Checks to see if incoming message contains Pardot tag
 * Origin = Pardot
 */
function isMessageFromPardot(msg) {
	return msg.indexOf(PARDOT_TAG) != -1;
}




/*  EXAMPLE WEBFORM DATA - OCT 2012

SoupermailConf = /main/scripts/problem.txt
Name = Robert Gama
Company = dshsfjdgj
Phone = 4169514262
Email = robertgama@gmail.com
Product = SolidWorks
SWSerialNumber = 0000 0000 0000 0000
SWVersion = 2013
SWServicePack = 2
EPDMVersion = 1
EPDMServicePack = 1
ObjetModel = Not Specified
DriveWorksPackage = Not Specified
OS = Windows XP 32 bit
Priority = Priority Low
Title = TEST WEBSITE CASE 2345sfsf
Description = Testing new script for setting case origin from web
*/
/*  EXAMPLE ADDON DATA - OCT 2012
SoupermailConf = /main/scripts/problem.txt
Origin = Addon
Name = Paul McDonnell
Company = Javelin Technologies
Phone = (905) 815-1906
Ext = 236
Email = paul.mcdonnell@javelin-tech.com
Product = SolidWorks
SWVersion = 2012
SWServicePack = SP1.0
SW SN = 9000 0075 5024 3107
OS = Microsoft Windows 7 Ultimate 
Platform = x86
Priority = Low
Title = Test email for Robert Gama
Description = I need to know what the support email looks like
Javelin Support Add-in Version = 2012 SP1.5
Send to = support@javelin-tech.com (this line only appears in the test emails)
*/
/*  Internal ID's of Case Priority List ('priority')

Critical = 4
High = 1
Medium = 2
Low = 3
Question = 5
*/
/*  Internal ID's of Product List ('customlist_supproduct') used in field: custevent_caseproduct

SolidWorks	6	 
Enterprise PDM	4	 
Workgroup PDM	7	 
Simulation	1	 
Plastics	13	 
Electrical	14	 
3DVIA	9	 
E3 WireWorks	3	 
Objet	8	 
PropertyLinks	5	 
DriveWorks	2	 
PlantWorks	10	 
BuiltWorks	12	 
OTHER	11
*/
/*  Case Origin Types for field = 'origin'

2	Phone
1	E-mail
-5	Web form
4	SW Add-on
3	Other
6	Pardot
*/
/*  Product Names from the Webform (In quotes will be in value in email, After is the name on webform)

"SolidWorks">SolidWorks Standard, Professional, or Premium
"EPDM">SolidWorks Enterprise PDM (EPDM)
"WPDM">SolidWorks Workgroup PDM (WPDM)
"Simulation">SolidWorks Simulation
"3DVIA Composer">3DVIA Composer
"E3.WireWorks">E�.Series or E�.WireWorks
"Objet">Objet 3D Printer
"DriveWorks">DriveWorks
"PropertyLinks">PropertyLinks
"PlantWorks">PlantWorks
"Other">Other product

["SolidWorks", "EPDM", "WPDM", "Simulation", "3DVIA Composer", "E3.WireWorks", "Objet", "DriveWorks", "PropertyLinks", "PlantWorks", "Other"]
*/
/*  Product Names from the Addon Email
["SolidWorks Standard, Professional, or Premium", "SolidWorks Enterprise PDM (EPDM)", "SolidWorks Workgroup PDM (WPDM)", "SolidWorks Simulation", "3DVIA Composer", "E�.Series or E�.WireWorks", "Objet 3D Printer", "DriveWorks", "PropertyLinks", "PlantWorks", "Other product"]
*/
/*  Priority Values from Addon Email
["Critical", "High", "Medium", "Low"]
*/
/*  Old isMessageFromOnlineForm function before Rod added the origin field  -  Reference for regEx for later use.
	//msg = msg.replace(/\s/gm,'');  // Replace all spaces, tabs, line returns, etc. with nothing - REMOVE ALL SPACES
	//var patt = /Name\=.+Company\=.+Phone\=.+Email\=.+Product\=.+SerialNumber\=/gm;  // Regular expression pattern to test
	//var isMatch = patt.test(msg);  //  Tests if the pattern can be found in the string
	//nlapiLogExecution('DEBUG', 'Online Web Form Test', 'Matches for website = ' + isMatch);
	//return isMatch;
*/