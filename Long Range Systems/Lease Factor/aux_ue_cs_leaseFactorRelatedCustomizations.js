/**
 * User event to search for and build out leaseFactorJson object so that can be accessed via client script.
 * leaseFactorJson = {
 * 		[Lease Term number]:{
			[MIN Value - MAX Value (If null, Simply MAX)]:{
				"min":min val,
				"max":max val,
				"factor":lease factor val
			}
		},
		...
	}
 * @param type
 * @param form
 * @param request
 */
function beforeLoadGetLF(type, form, request)
{
	//Only process for user event
	if (nlapiGetContext().getExecutionContext() != 'userinterface')
	{
		return;
	}
	
	try
	{
		//1. Search and load all Leasfactor def.
		var lfflt = [new nlobjSearchFilter('isinactive', null, 'is','F')];
		var lfcol = [new nlobjSearchColumn('custrecord_lease_factor_terms').setSort(true),
		             new nlobjSearchColumn('custrecord_lease_factor_min_amt'),
		             new nlobjSearchColumn('custrecord_lease_factor_max_amt'),
		             new nlobjSearchColumn('custrecord_lease_factor')];
		
		var ifrs = nlapiSearchRecord('customrecord_lease_factor', null, lfflt, lfcol);
		
		//Build out JSON object of Lease factors by Lease Terms
		/**
		[Lease Term number]:{
			[MIN Value - MAX Value (If null, Simply MAX)]:{
				"min":min val,
				"max":max val,
				"factor":lease factor val
			}
		}
		*/
		var leaseFactorJson = {};
		for (var i=0; ifrs && i < ifrs.length; i+=1)
		{
			var leaseTermText = ifrs[i].getText('custrecord_lease_factor_terms');
			var minValue = ifrs[i].getValue('custrecord_lease_factor_min_amt');
			var maxValue = ifrs[i].getValue('custrecord_lease_factor_max_amt');
			if (!maxValue)
			{
				maxValue = 'MAX';
			}
			var lfValue = ifrs[i].getValue('custrecord_lease_factor');
			var termKey = minValue+'-'+maxValue;
			
			if (!leaseFactorJson[leaseTermText])
			{
				leaseFactorJson[leaseTermText] = {};
			}
			//Populate Term JSON Object
			leaseFactorJson[leaseTermText][termKey]={
				"min":minValue,
				"max":maxValue,
				"factor":lfValue
			};
		}
		
		//ONLY create it IF there are lease factor data
		if (ifrs && ifrs.length > 0)
		{
			//add dynamic inlineHTML field to store lease factor information.
			var jsonHtmlFld = form.addField('custpage_jsonhtmlfld','inlinehtml');
			jsonHtmlFld.setDefaultValue('<script language="JavaScript">var leaseFactorJson='+JSON.stringify(leaseFactorJson)+'</script>');
		}
	}
	catch(loadlferr)
	{
		log('error','Error grabbing all Lease Factors',getErrText(loadlferr));
	}
}

//------------------- Client Side Function ----------------------------------------------

function leaseFactorFldChanged(type, name, linenum)
{
	if (nlapiGetContext().getExecutionContext() != 'userinterface')
	{
		return;
	}
	
	
	if (name=='custbody_lease_factor_checkbox' && nlapiGetFieldValue('custbody_lease_factor_checkbox') == 'T') 
	{
		calcLeaseFactor();	
	}
}

function leaseFactorRecalc(type)
{
	if (type=='item')
	{
		calcLeaseFactor();
	}
}

function leaseFactorOnSave()
{
	if (nlapiGetContext().getExecutionContext() != 'userinterface')
	{
		return;
	}
	
}

function calcLeaseFactor()
{
	//If display lease factor field is checked, make sure subtotal is above 1000
	if (nlapiGetFieldValue('custbody_lease_factor_checkbox') == 'T')
	{
		//6/28/2015 - Request to use Total instead of subtotal
		var subTotalValue = parseFloat(nlapiGetFieldValue('total'));
		if (subTotalValue < 1000) {
			alert('Subtotal must be greater than or equal to $1000');
			//turn off the checkbox and reset values of all Lease Factor fields to 0
			nlapiSetFieldValue('custbody_lease_factor_checkbox','F');
			nlapiSetFieldValue('custbody_one_year_lease_amount','0.0');
			nlapiSetFieldValue('custbodytwo_year_lease_amount','0.0');
			nlapiSetFieldValue('custbodythree_year_lease_amount','0.0');
			nlapiSetFieldValue('custbody_four_year_lease_amount','0.0');
			nlapiSetFieldValue('custbody_five_year_lease_amount','0.0');
		}
		else
		{
			//calculate the Lease Factor based on leaseFactorJson generated by User Event Script 
			/**
			[Lease Term number]:{
				[MIN Value - MAX Value (If null, Simply MAX)]:{
					"min":min val,
					"max":max val,
					"factor":lease factor val
				}
			}
			*/
			//Make sure it's been generated
			if (!leaseFactorJson)
			{
				alert('Lease Factor Definition NOT loaded Please contact your administrator');
			}
			else
			{
				//Lease Terms local JSON variable
				var leaseTerms = {
						'12 months':{
							'fieldid':'custbody_one_year_lease_amount',
							'months':12
						},
						'24 months':{
							'fieldid':'custbodytwo_year_lease_amount',
							'months':24
						},
						'36 months':{
							'fieldid':'custbodythree_year_lease_amount',
							'months':36
						},
						'48 months':{
							'fieldid':'custbody_four_year_lease_amount',
							'months':48
						},
						'60 months':{
							'fieldid':'custbody_five_year_lease_amount',
							'months':60
						}
				};
				
				var leaseFactorKey = '';
				//loop through Each Year field and calculate the lease value
				for (var lf in leaseTerms)
				{
					//Make sure we have Lease Factor Definition for THIS Term
					if (leaseFactorJson[lf])
					{
						//If min/max key is missing, find it
						if (!leaseFactorKey)
						{
							//Have to loop through each Range to find the matching range
							//KEY is min-max. Using - as separator, we can grab the min and max value
							for (var minMaxKey in leaseFactorJson[lf])
							{
								var minMaxAr = minMaxKey.split('-');
								var minValue = parseFloat(minMaxAr[0]);
								
								//ONLY consider min/max key if subTotalValue is > minValue continue
								if (subTotalValue > minValue)
								{
									//If it reaches element with missing Max value or word MAX/max OR subTotalValue is Less than or equal to max, set the key to THIS element
									var maxValue = minMaxAr[1];
									if (!maxValue || (maxValue && (isNaN(maxValue) || subTotalValue <= parseFloat(maxValue) ) ) )
									{
										leaseFactorKey = minMaxKey;
										break;
									}
								}
							}//for loop to identify correct lease factor key
						}//End leaseFactorKey check
						
						//Must have leaseFactorKey at this point to proceed
						if (leaseFactorKey)
						{
							//alert(leaseFactorKey);
							///alert(leaseFactorJson[lf][leaseFactorKey].factor);
							//alert(leaseTerms[lf].months);
							var leaseAmount = (subTotalValue * parseFloat(leaseFactorJson[lf][leaseFactorKey].factor))/leaseTerms[lf].months;
							nlapiSetFieldValue(leaseTerms[lf].fieldid, leaseAmount);
						}
						
					}//End check existence of Lease Factor Definition for THIS lease term
				}//End Loop through all Leas Terms
			}//End !leaseFactorJson
		}
	}	
}