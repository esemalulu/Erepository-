/**
 * Pardot Login Info:
 * User: heartmath@audaxium.com
 * API Key: c45aa008091f8634d9622fe50a52bb13
 * Pass: Thisiscrazy10
 * 
 * This Scheduled script uses saved search to bring out all client and lead record to
 * process into Pardot.
 * Search Name: AUX Pardot Candidates Script#1- DO NOT DELETE
 * Search ID: customsearch_aux_pardot_candidates
 * Saved search already contains all the search criteria.
 * Script will add on Date range criteria against Date Created
 * 
 */
var ctx = nlapiGetContext();
var exitCount = 1000;
var curDateTime = new Date();

var savedSearchId = ctx.getSetting('SCRIPT','custscript_savedsearch_id');
var execDuration = ctx.getSetting('SCRIPT','custscript_exec_duration');

//if script is rescheduled for what ever reason, keep track of original time
var slastExecDateTime = ctx.getSetting('SCRIPT','custscript_last_exec_datetime');
var sexecutionDateTime = ctx.getSetting('SCRIPT','custscript_rs_execution_datetime');

var connErrRsCount = ctx.getSetting('SCRIPT','custscript_conn_error_reschedule_count');
if (!connErrRsCount) {
	connErrRsCount = 0;
}
var executionDateTime = getFormattedTime(curDateTime);

//calculate last execution time based on script repeat duration
var lastExecDateTime = getFormattedTime(new Date(curDateTime.getTime() - (parseInt(execDuration)*60000)));

if (slastExecDateTime && sexecutionDateTime) {
	executionDateTime = sexecutionDateTime;
	lastExecDateTime = slastExecDateTime;
}

//last processed id
var lastProcId = ctx.getSetting('SCRIPT','custscript_lastproc_recordid');
var isRescheduled = false;

//pardot account info
var pardotUser = 'heartmath@audaxium.com';
var pardotUserKey = 'c45aa008091f8634d9622fe50a52bb13';
var pardotPass = 'Thisiscrazy10';
var pardotApiKey = '';

var pardotLoginUrl = 'https://pi.pardot.com/api/index?email='+pardotUser+'&password='+pardotPass+'&user_key='+pardotUserKey;
//key is generated by Pardot upon successful connection
var pardotApiKey = '';

//process log
var procHeader = '"InternalID","Entity Name","Process Status","Process Msg","Pardot/NetSuite Action","Stage","Status","Date Created","Email Address","Original Source","Global Status","Hosted Page","Hosted Path"\n';
var procBody = '';
var counter = 1;
var rsltSet = null;
var errMsg = '';

function processNsToPardot() {
	try {
		
		log('debug','last exec date', lastExecDateTime);
		log('debug','date obj', curDateTime);
		log('debug','last execution date', lastExecDateTime);
		log('debug','execution date', executionDateTime);
		log('debug','last proc id', lastProcId);
		log('debug','err rs count', connErrRsCount);
		
		//check for api key
		if (!pardotApiKey) {
			nlapiLogExecution('debug', 'aquire API Key', 'No api_key, attempting to get one');
			var response = nlapiRequestURL(pardotLoginUrl, null, null );
			var responseXML = nlapiStringToXML( response.getBody() );
			pardotApiKey = nlapiSelectValue( responseXML, '//api_key' );
		}
		
		log('debug','api key',pardotApiKey);
		
		if (pardotApiKey) {
            /** dynamically build Expression search filter **/
			var fltexp = [
			              [
			               	['custentity_aux_nspardot_retry','is','T'],
			               	'and',
			               	['custentitystbpd_sent_to_pardot','noneof','1']
			              ],
			              'or',
			              [
			               ['datecreated','within',lastExecDateTime, executionDateTime],
			               'and',
			               ['globalsubscriptionstatus','noneof','4'],
			               'and',
			               ['custentitystbpd_sent_to_pardot','noneof','1'],
			               'and',
			               ['email','isnotempty',''],
			               'and',
			               ['isperson','is','T'],
			               'and',
			               ['status','anyof',['13','6']]
			              ]
			             ];
			
			if (lastProcId) {
				fltexp = [
			              [
			               	['custentity_aux_nspardot_retry','is','T'],
			               	'and',
			               	['custentitystbpd_sent_to_pardot','noneof','1'],
			               	'and',
				            ['internalidnumber','lessthan',lastProcId]
			              ],
			              'or',
			              [
			               ['datecreated','within',lastExecDateTime, executionDateTime],
			               'and',
			               ['globalsubscriptionstatus','noneof','4'],
			               'and',
			               ['custentitystbpd_sent_to_pardot','noneof','1'],
			               'and',
			               ['email','isnotempty',''],
			               'and',
			               ['isperson','is','T'],
			               'and',
			               ['status','anyof',['13','6']],
			               'and',
			               ['internalidnumber','lessthan',lastProcId]
			              ]
			             ];
			}
			
			//build columns
			var ccol = [new nlobjSearchColumn('internalid').setSort(true),
			            new nlobjSearchColumn('entityid'),
			            new nlobjSearchColumn('datecreated'),
			            new nlobjSearchColumn('stage'),
			            new nlobjSearchColumn('entitystatus'),
			            new nlobjSearchColumn('isperson'),
			            new nlobjSearchColumn('firstname'),
			            new nlobjSearchColumn('lastname'),
			            new nlobjSearchColumn('email'),
			            new nlobjSearchColumn('custentity_stbgn_source'),
			            new nlobjSearchColumn('globalsubscriptionstatus')];
			
			
			var search = nlapiCreateSearch('customer', fltexp, ccol);
			rsltSet = search.runSearch();
			//process each row
			rsltSet.forEachResult(processRow);		
			
		}
	} catch (e) {
		log('error','Runtime Error',getErrText(e));
		
		//if script errored due to Pardot connection AND reschedule count due to error is less than 3
		if (getErrText(e).indexOf('SSS_CONNECTION_TIME_OUT') > -1 && parseInt(connErrRsCount) <=3) {
			isRescheduled = true;
			var param = new Array();
			param['custscript_savedsearch_id'] = savedSearchId;
			param['custscript_exec_duration'] = execDuration;
			param['custscript_last_exec_datetime'] = lastExecDateTime;
			param['custscript_rs_execution_datetime'] = executionDateTime;
			param['custscript_conn_error_reschedule_count'] = parseInt(connErrRsCount)+1;
			param['custscript_lastproc_recordid'] = lastProcId;
			
			var schStatus = nlapiScheduleScript(ctx.getScriptId(), ctx.getDeploymentId(), param);
			if (schStatus=='QUEUED') {
				//log('debug','Script Rescheduled','Last Processed Group ID: '+trslt[t].getId());
				errMsg = 'Pardot Connection Error occured during Pardot Push Script #1.<br/><br/>Date Range: '+lastExecDateTime+' - '+executionDateTime+'<br/>Error Occured:<br/>'+getErrText(e)+
						 '<br/><br/>Script is Rescheduled to try again from where it left off:<br/>'+
						 '<b>Last Processed ID: </b>'+lastProcId+'<br/>'+
						 '<b>Connection Error Retry Count: </b>'+(parseInt(connErrRsCount)+1);
				
				nlapiSendEmail(-5, 'joe.son@audaxium.com,heartmath@audaxium.com,lynn@heartmath.org', 'Pardot Connection Error Pardot Push Script #1', errMsg);
			}
		} else {
			errMsg = 'Error occured during Pardot Push Script #1.<br/><br/>Date Range: '+lastExecDateTime+' - '+executionDateTime+'<br/>Error Occured:<br/>'+getErrText(e);
			
			nlapiSendEmail(-5, 'joe.son@audaxium.com,heartmath@audaxium.com,lynn@heartmath.org', 'Error Pardot Push Script #1', errMsg);
		}		
	}
	
	if (procBody) {
		//Save the Report in the NS Documents: Folder 42013 (SLA CSV Reports)
		var procFileName = 'Inst. HeartMath Pardot Push for '+executionDateTime+'.csv';
		var procFile = nlapiCreateFile(procFileName,'CSV',procHeader+procBody);
		var procAttachment = [procFile];
		
		//email the report first
		//generate No Results found email
		var procSbj = 'ERRORS [Lead/Client Push to Pardot LIVE Mode]-Inst. HeartMath Pardot Push for '+executionDateTime+'.csv';
		var procMsg = 'CSV Formatted process for Lead/Client Create Between <b>'+lastExecDateTime+' - '+executionDateTime+'</b><br/><br/>One or More records Errored during processing. <br/><br/>'+errMsg;
		
		if (isRescheduled) {
			procMsg += '<br/><br/>Script was Rescheduled.';
		}
		
		//,lynn@heartmath.org
		nlapiSendEmail(-5, 'lynn@heartmath.org', procSbj, procMsg, null, null, null, procAttachment);
	}	
	
	//schedule Trx Run
	if (!isRescheduled) {
		log('debug','schedule script #2',lastExecDateTime+' // '+executionDateTime);
		var param = new Array();
		param['custscript_trx_exec_datetime'] = executionDateTime;
		param['custscript_trx_lastexec_datetime'] = lastExecDateTime;
		
		var schStatus = nlapiScheduleScript('customscript_aux_ss_trxpush_ns2pardot', 'customdeploy_aux_ss_trxpush_ns2pardot', param);
	}
}

/**
 * process each row returned to push to pardot
 * @param row
 * @returns {Boolean}
 */
function processRow(row) {
	
	
	var pardotCreateUrl = 'https://pi.pardot.com/api/prospect?version=3&do=create&user_key='+pardotUserKey;
	var pardotUpdateUrl = 'https://pi.pardot.com/api/prospect?version=3&do=update&user_key='+pardotUserKey;
	var pardotAssignUrl = 'https://pi.pardot.com/api/prospect?version=3&do=assign&user_key='+pardotUserKey;
	var pardotReadEmailUrl = 'https://pi.pardot.com/api/prospect?version=3&do=read&user_key='+pardotUserKey;
	
	var robj = new Object();
	robj.id = row.getId();
	robj.name = row.getValue('entityid');
	robj.datecreated = row.getValue('datecreated');
	robj.stageid = row.getValue('stage');
	robj.stagetext = row.getText('stage');
	robj.statusid = row.getValue('entitystatus');
	robj.statustext = row.getText('entitystatus');
	robj.isperson = row.getValue('isperson');
	robj.email = row.getValue('email');
	robj.firstname = row.getValue('firstname');
	robj.lastname = row.getValue('lastname');
	//robj.oleadsource = row.getValue('custentitystbai_orig_lead_source');
	robj.osourceid = row.getValue('custentity_stbgn_source');
	robj.osourcetext = row.getText('custentity_stbgn_source');
	robj.globalsubstatusid = row.getValue('globalsubscriptionstatus');
	robj.globalsubstatustext = row.getText('globalsubscriptionstatus');
	
	//look up hostedpage info
	//hostedPage Name = name:hostedPage
	//hostedPage Path = hostedpath:hostedPage
	var hflt = [new nlobjSearchFilter('internalid', null, 'anyof', robj.id)];
	var hcol = [new nlobjSearchColumn('name', 'hostedPage'),
	            new nlobjSearchColumn('hostedpath', 'hostedPage')];
	var hrs = nlapiSearchRecord('customer', null, hflt, hcol);
	robj.hashosteddata = false;
	robj.pathihmweb = false;
	robj.pathgciweb = false;
	robj.hostedpathtext = '';
	robj.hostednametext = '';
	for (var h=0; hrs && h < hrs.length; h++) {
		if (!robj.hashosteddata) {
			robj.hashosteddata = true;
		}
		
		var hpath = hrs[h].getValue('hostedpath','hostedPage');
		var hname = hrs[h].getValue('name','hostedPage');
		robj.hostedpathtext += hpath+' // ';
		robj.hostednametext += hname+' // ';
		//check for /store.html or /gci-store.html
		if (hpath == '/store.html' && !robj.pathihmweb) {
			robj.pathihmweb = true;
		}
			
		if (hpath == '/gci-store.html' && !robj.pathgciweb) {
			robj.pathgciweb = true;
		}		
	}
	
	robj.treataslead = false;
	if (robj.statustext == 'CLIENT-Closed Won' && (robj.pathgciweb || robj.pathihmweb)) {
		//treat the process as LEAD-Lead-Web Store
		robj.treataslead = true;
	}
	
	//if lead doesn't have hosted data, treat it as error
	robj.treataserror = false;
	robj.errormsg = '';
	if (robj.statustext == 'LEAD-Lead-Web Store' && (!robj.hashosteddata || (!robj.pathgciweb && !robj.pathihmweb))) {
		robj.treataserror = true;
		
		if (!robj.hashosteddata) {
			robj.errormsg = 'Lead does NOT have any hosted page information';
		} else if(!robj.pathgciweb && !robj.pathihmweb) {
			robj.errormsg = 'Lead does NOT have /store.html or /gci-store.html values';
		}
		
	}
	
	//hasProcError
	var hasProcErr = false;
	
	//find out if this email exists in Pardot
	if (!robj.email) {
		procBody += '"'+robj.id+'",'+
					'"'+robj.name+'",'+
					'"Failed",'+
					'"No Email Defined",'+
					'"No Action Taken",'+
					'"'+robj.stagetext+'",'+
					'"'+robj.statustext+'",'+
					'"'+robj.datecreated+'",'+
					'"'+robj.email+'",'+
					'"'+robj.osourcetext+'",'+
					'"'+robj.globalsubstatustext+'",'+
					'"'+robj.hostednametext+'",'+
					'"'+robj.hostedpathtext+'"\n';
		hasProcErr = true;
	} else if (robj.treataserror) {
		
		procBody += '"'+robj.id+'",'+
					'"'+robj.name+'",'+
					'"Failed",'+
					'"'+robj.errormsg+'",'+
					'"No Action Taken",'+
					'"'+robj.stagetext+'",'+
					'"'+robj.statustext+'",'+
					'"'+robj.datecreated+'",'+
					'"'+robj.email+'",'+
					'"'+robj.osourcetext+'",'+
					'"'+robj.globalsubstatustext+'",'+
					'"'+robj.hostednametext+'",'+
					'"'+robj.hostedpathtext+'"\n';
		
		hasProcErr = true;
		
	} else {
		
		var pardotInstHeartMatUserId = '542372'; //info@heartMath.org (Institute HeartMath)
		
		pardotCreateUrl += '&api_key='+pardotApiKey+'&email='+robj.email;
		pardotUpdateUrl += '&api_key='+pardotApiKey+'&email='+robj.email;
		pardotAssignUrl += '&api_key='+pardotApiKey+'&email='+robj.email+'&user_id='+pardotInstHeartMatUserId;
		pardotReadEmailUrl += '&api_key='+pardotApiKey+'&email='+robj.email;
		
		//Find out if this email exists in Pardot
		var emailLookupResponse = nlapiRequestURL(pardotReadEmailUrl, null, null );
		var emailLookupResponseXML = nlapiStringToXML(emailLookupResponse.getBody());
		var pardotProspectId = nlapiSelectValue( emailLookupResponseXML, '//id' );
		//if existing prospect in pardot, check to see if it's unassigned
		
		if (pardotProspectId) {
			//exists, assign user to 
			var assignedTo = nlapiSelectValue( emailLookupResponseXML, '//assigned_to/user/id' );
			if (!assignedTo) {
				var assignToResponse = nlapiRequestURL(pardotAssignUrl, null, null );
				var assignToResponseXML = nlapiStringToXML( assignToResponse.getBody() );
				if (nlapiSelectValue(assignToResponseXML, '//@stat') == 'ok') {
					//only update Pardot URL if pardot creation was successful
					/**
					procBody += '"'+robj.id+'",'+
								'"'+robj.name+'",'+
								'"Success",'+
								'"Prospect ID with email: '+robj.email+' already exists and is NOT assigned to anyone",'+
								'"Assign Prospect to '+pardotInstHeartMatUserId+' in Pardot",'+
								'"'+robj.stagetext+'",'+
								'"'+robj.statustext+'",'+
								'"'+robj.datecreated+'",'+
								'"'+robj.email+'",'+
								'"'+robj.osourcetext+'",'+
								'"'+robj.globalsubstatustext+'",'+
								'"'+robj.hostednametext+'",'+
								'"'+robj.hostedpathtext+'"\n';
					*/
				} else {
					procBody += '"'+robj.id+'",'+
								'"'+robj.name+'",'+
								'"Failed",'+
								'"Prospect Reassignment Failed: '+nlapiSelectValue(assignToResponseXML, '//@code')+' :: '+nlapiSelectValue(assignToResponseXML, '//err')+'",'+
								'"Prospect assignment failed in Pardot",'+
								'"'+robj.stagetext+'",'+
								'"'+robj.statustext+'",'+
								'"'+robj.datecreated+'",'+
								'"'+robj.email+'",'+
								'"'+robj.osourcetext+'",'+
								'"'+robj.globalsubstatustext+'",'+
								'"'+robj.hostednametext+'",'+
								'"'+robj.hostedpathtext+'"\n';
					hasProcErr = true;
					
				}
			}
			
		} else {
			if ( (strTrim(robj.stagetext) == 'Lead' || robj.treataslead) && (robj.pathgciweb || robj.pathihmweb)) {
				var pardotGciWebstoreCampId = '2701'; //GCI Webstore
				var pardotIhmWebstoreCampId = '2521'; //IHM Webstore
				
				try {
					var campIdToSet = '';
					var campTextValue = '';
					var pardotClientGrp2Value = '';
					var oSourceValue = '';
					var statusToSet = '13'; //CLIENT - Closed Won Status ID
					var pnAction = '';
					
					if (robj.treataslead) {
						pnAction = 'Client with HostedPage Data. Treat as Lead // ';
					}

					if (robj.pathgciweb) {
						//log('debug','Lead GCI (paths) ',robj.hostedpathtext);
						campIdToSet = pardotGciWebstoreCampId;
						campTextValue = 'GCI Webstore';
						pardotClientGrp2Value = 'GCI';
						oSourceValue = 'GCP Website';
						pnAction += 'Path has gci-store.html // ';
					} else if (robj.pathihmweb){
						//log('debug','Lead No GCI (paths) ',robj.hostedpathtext);
						campIdToSet = pardotIhmWebstoreCampId;
						pardotClientGrp2Value = 'IHM';
						campTextValue = 'IHM Webstore';
						oSourceValue = 'Website';
						pnAction += 'Path has store.html // ';
						
					}
					
					//create new prospect
					pardotCreateUrl += '&campaign_id='+campIdToSet+'&first_name='+robj.firstname+'&last_name='+robj.lastname;
					var createResponse = nlapiRequestURL(pardotCreateUrl, null, null );
					var createResponseXML = nlapiStringToXML( createResponse.getBody() );
					if (nlapiSelectValue(createResponseXML, '//@stat') == 'ok') {
						
						//assign this to Institute HeartMath user in Pardot
						nlapiRequestURL(pardotAssignUrl, null, null );
					
						//pardot success, update NetSuite
						var leadrec = nlapiLoadRecord('customer', robj.id);
						leadrec.setFieldValue('entitystatus',statusToSet);
						
						//get existing Client Group 2 values
						var cg2Selections = new Array();
						var cg2OnLead = leadrec.getFieldTexts('custentity_stbmn_client_group_ns');
						for (var c=0; cg2OnLead && c < cg2OnLead.length; c++) {
							cg2Selections.push(cg2OnLead[c]);
						}
						
						if (!cg2Selections.contains(pardotClientGrp2Value)) {
							cg2Selections.push(pardotClientGrp2Value);
						}
						
						leadrec.setFieldTexts('custentity_stbmn_client_group_ns', cg2Selections);
						
						pnAction += 'Pardot Campaign: '+campTextValue+' Pardot Assign: Institute HeartMath (542372) // NetSuite Status: '+statusToSet+' // NetSuite Client Group 2: '+cg2Selections;
						
						/**
						if (pardotClientGrp2Value == 'GCI') {
							leadrec.setFieldValue('custentity_stbgn_gcpmbr_startdate', nlapiDateToString(nlapiStringToDate(robj.datecreated)));
							pnAction += ' // NetSuite GCP Mem Start Date: '+nlapiDateToString(nlapiStringToDate(robj.datecreated));
						}
						*/
						leadrec.setFieldText('custentity_stbgn_source', oSourceValue);
						pnAction += ' // NetSuite Original Source: '+oSourceValue;
						
						
						var leadMsg = 'new Prospect created in pardot assigned to '+campTextValue+' campaign // ';
						var leadStatus = '';
						try {
							leadrec.setFieldValue('custentitystbpd_sent_to_pardot','1');
							nlapiSubmitRecord(leadrec, true, true);
							leadMsg += 'Updated Lead or Client Record and Marked as Sent to Pardot as Yes';
							leadStatus = 'Success';
						} catch (leadupderr) {
							leadMsg += 'NS Update Failed: '+getErrText(leadupderr);
							leadStatus = 'Pardot Create Success // NS Update Failed';
							hasProcErr = true;
						}
						
						//only update Pardot URL if pardot creation was successful
						/**
						procBody += '"'+robj.id+'",'+
									'"'+robj.name+'",'+
									'"'+leadStatus+'",'+
									'"'+leadMsg+'",'+
									'"'+pnAction+'",'+
									'"'+robj.stagetext+'",'+
									'"'+robj.statustext+'",'+
									'"'+robj.datecreated+'",'+
									'"'+robj.email+'",'+
									'"'+robj.osourcetext+'",'+
									'"'+robj.globalsubstatustext+'",'+
									'"'+robj.hostednametext+'",'+
									'"'+robj.hostedpathtext+'"\n';
						*/
						
					} else {
						procBody += '"'+robj.id+'",'+
									'"'+robj.name+'",'+
									'"Failed",'+
									'"Prospect creation Failed: '+nlapiSelectValue(createResponseXML, '//@code')+' :: '+nlapiSelectValue(createResponseXML, '//err')+'",'+
									'"Pardot creation failed",'+
									'"'+robj.stagetext+'",'+
									'"'+robj.statustext+'",'+
									'"'+robj.datecreated+'",'+
									'"'+robj.email+'",'+
									'"'+robj.osourcetext+'",'+
									'"'+robj.globalsubstatustext+'",'+
									'"'+robj.hostednametext+'",'+
									'"'+robj.hostedpathtext+'"\n';
						hasProcErr = true;
						
					}
					
				} catch (prodcreateerr) {
					procBody += '"'+robj.id+'",'+
								'"'+robj.name+'",'+
								'"Failed",'+
								'"Prospect creation Failed (NS Error): '+getErrText(prodcreateerr)+'",'+
								'"Pardot Creation Failed",'+
								'"'+robj.stagetext+'",'+
								'"'+robj.statustext+'",'+
								'"'+robj.datecreated+'",'+
								'"'+robj.email+'",'+
								'"'+robj.osourcetext+'",'+
								'"'+robj.globalsubstatustext+'",'+
								'"'+robj.hostednametext+'",'+
								'"'+robj.hostedpathtext+'"\n';
					hasProcErr = true;
				}
				
			} else  {
				var osrc = (robj.osourcetext)?robj.osourcetext.toLowerCase():'';
					
				if (osrc && (osrc == 'heartmath llc' || osrc == 'quantum intech' || osrc == 'website' || osrc == 'gcp website')) {
					var ccampid = '', osrcCampText='';
					if (osrc == 'website' || osrc == 'gcp website') {
						ccampid = '2711'; //default to GCP Website All
						osrcCampText = 'GCP Website All';
						if (osrc == 'website') {
							ccampid = '81'; // change to IHM Website All
							osrcCampText = 'IHM Website All';
						}
							
						pardotCreateUrl += '&campaign_id='+ccampid+'&first_name='+robj.firstname+'&last_name='+robj.lastname;
						var ocreateResponse = nlapiRequestURL(pardotCreateUrl, null, null );
						var ocreateResponseXML = nlapiStringToXML( ocreateResponse.getBody() );
						if (nlapiSelectValue(ocreateResponseXML, '//@stat') == 'ok') {
							//assign this to Institute HeartMath user in Pardot
							nlapiRequestURL(pardotAssignUrl, null, null );
								
							nlapiSubmitField('customer', robj.id, 'custentitystbpd_sent_to_pardot', '1', false);
							
							/**
							procBody += '"'+robj.id+'",'+
											'"'+robj.name+'",'+
											'"Success",'+
											'"Created New prospect for Original Source of '+robj.osourcetext+' Client",'+
											'"NS Sent to Pardot to Yes // Pardot Campaign: '+osrcCampText+' // Pardot Assign: Institute HeartMath (542372)",'+
											'"'+robj.stagetext+'",'+
											'"'+robj.statustext+'",'+
											'"'+robj.datecreated+'",'+
											'"'+robj.email+'",'+
											'"'+robj.osourcetext+'",'+
											'"'+robj.globalsubstatustext+'",'+
											'"'+robj.hostednametext+'",'+
											'"'+robj.hostedpathtext+'"\n';
							*/	
								
						} else {
							procBody += '"'+robj.id+'",'+
										'"'+robj.name+'",'+
										'"Failed",'+
										'"Prospect creation Failed for Original Source of '+robj.osourcetext+' Client '+
											nlapiSelectValue(ocreateResponseXML, '//@code')+' :: '+nlapiSelectValue(ocreateResponseXML, '//err')+'",'+
										'"Pardot Prospect creation failed",'+
										'"'+robj.stagetext+'",'+
										'"'+robj.statustext+'",'+
										'"'+robj.datecreated+'",'+
										'"'+robj.email+'",'+
										'"'+robj.osourcetext+'",'+
										'"'+robj.globalsubstatustext+'",'+
										'"'+robj.hostednametext+'",'+
										'"'+robj.hostedpathtext+'"\n';
							hasProcErr = true;
								
						}
							
					} else if (osrc == 'heartmath llc' || osrc == 'quantum intech') {
							
						ccampid = '19018'; //default to Multi Tri-Co B4 Launch and After
						osrcCampText = 'Multi Tri-Co B4 Launch and After';
							
						pardotCreateUrl += '&campaign_id='+ccampid+'&first_name='+robj.firstname+'&last_name='+robj.lastname;
						var lcreateResponse = nlapiRequestURL(pardotCreateUrl, null, null );
						var lcreateResponseXML = nlapiStringToXML( lcreateResponse.getBody() );
						if (nlapiSelectValue(lcreateResponseXML, '//@stat') == 'ok') {
							//assign this to Institute HeartMath user in Pardot
							nlapiRequestURL(pardotAssignUrl, null, null );
								
							nlapiSubmitField('customer', robj.id, 'custentitystbpd_sent_to_pardot', '1', false);
							
							/**
							procBody += '"'+robj.id+'",'+
											'"'+robj.name+'",'+
											'"Success",'+
											'"Created New prospect for Original Source of '+robj.osourcetext+' Client",'+
											'"NS Sent to Pardot to Yes // Pardot Campigan set to '+osrcCampText+' // Pardot Assign: Institute HeartMath (542372)",'+
											'"'+robj.stagetext+'",'+
											'"'+robj.statustext+'",'+
											'"'+robj.datecreated+'",'+
											'"'+robj.email+'",'+
											'"'+robj.osourcetext+'",'+
											'"'+robj.globalsubstatustext+'",'+
											'"'+robj.hostednametext+'",'+
											'"'+robj.hostedpathtext+'"\n';
							*/	
								
						} else {
							procBody += '"'+robj.id+'",'+
											'"'+robj.name+'",'+
											'"Failed",'+
											'"Prospect creation Failed for Original Source of '+robj.osourcetext+' Client - '+
												nlapiSelectValue(lcreateResponseXML, '//@code')+' :: '+nlapiSelectValue(lcreateResponseXML, '//err')+'",'+
											'"Pardot create failed",'+
											'"'+robj.stagetext+'",'+
											'"'+robj.statustext+'",'+
											'"'+robj.datecreated+'",'+
											'"'+robj.email+'",'+
											'"'+robj.osourcetext+'",'+
											'"'+robj.globalsubstatustext+'",'+
											'"'+robj.hostednametext+'",'+
											'"'+robj.hostedpathtext+'"\n';
							hasProcErr = true;
						}
					}
				} else {
						
					pardotCreateUrl += '&first_name='+robj.firstname+'&last_name='+robj.lastname;
					var ocreateResponse = nlapiRequestURL(pardotCreateUrl, null, null );
					var ocreateResponseXML = nlapiStringToXML( ocreateResponse.getBody() );
					if (nlapiSelectValue(ocreateResponseXML, '//@stat') == 'ok') {
						//assign this to Institute HeartMath user in Pardot
						nlapiRequestURL(pardotAssignUrl, null, null );
						
						nlapiSubmitField('customer', robj.id, 'custentitystbpd_sent_to_pardot', '1', false);
						
						/**
						procBody += '"'+robj.id+'",'+
										'"'+robj.name+'",'+
										'"Success",'+
										'"Pardot Processing for Original Source of '+robj.osourcetext+' Client",'+
										'"NS Sent to Pardot to Yes // No Campaign Set in Pardot",'+
										'"'+robj.stagetext+'",'+
										'"'+robj.statustext+'",'+
										'"'+robj.datecreated+'",'+
										'"'+robj.email+'",'+
										'"'+robj.osourcetext+'",'+
										'"'+robj.globalsubstatustext+'",'+
										'"'+robj.hostednametext+'",'+
										'"'+robj.hostedpathtext+'"\n';
						*/
					} else {
						procBody += '"'+robj.id+'",'+
									'"'+robj.name+'",'+
									'"Failed",'+
									'"Prospect creation Failed for Original Source of '+robj.osourcetext+' Client - '+
										nlapiSelectValue(ocreateResponseXML, '//@code')+' :: '+nlapiSelectValue(ocreateResponseXML, '//err')+'",'+
									'"Pardot create failed",'+
									'"'+robj.stagetext+'",'+
									'"'+robj.statustext+'",'+
									'"'+robj.datecreated+'",'+
									'"'+robj.email+'",'+
									'"'+robj.osourcetext+'",'+
									'"'+robj.globalsubstatustext+'",'+
									'"'+robj.hostednametext+'",'+
									'"'+robj.hostedpathtext+'"\n';
						hasProcErr = true;
					}
				}
			}
		}
	}
	
	//hasProcErr = true;
	var retryFlag = 'T';
	try {
		if (hasProcErr) {
			//update pardot retry to T
			nlapiSubmitField('customer', robj.id, 'custentity_aux_nspardot_retry', 'T', false);
			retryFlag = 'T';
		} else {
			//update pardot retry to F
			nlapiSubmitField('customer', robj.id, 'custentity_aux_nspardot_retry', 'F', false);
			retryFlag = 'F';
		}
	} catch (retryseterr) {
		procBody += '"'+robj.id+'",'+
		'"'+robj.name+'",'+
		'"Failed",'+
		'"Updating Pardot Retry Flag to '+retryFlag+' Failed for Client Internal ID: '+robj.id+'",'+
		'"Update Retry Flag failed",'+
		'"'+robj.stagetext+'",'+
		'"'+robj.statustext+'",'+
		'"'+robj.datecreated+'",'+
		'"'+robj.email+'",'+
		'"'+robj.osourcetext+'",'+
		'"'+robj.globalsubstatustext+'",'+
		'"'+robj.hostednametext+'",'+
		'"'+robj.hostedpathtext+'"\n';
		
	}
	
	
	//update lastProcId
	lastProcId = robj.id;
	
	//log('debug','remaining', ctx.getRemainingUsage());
	
	if (ctx.getRemainingUsage() <= exitCount) {
		isRescheduled = true;
		var param = new Array();
		param['custscript_savedsearch_id'] = savedSearchId;
		param['custscript_exec_duration'] = execDuration;
		param['custscript_last_exec_datetime'] = lastExecDateTime;
		param['custscript_rs_execution_datetime'] = executionDateTime;
		param['custscript_conn_error_reschedule_count'] = parseInt(connErrRsCount);
		param['custscript_lastproc_recordid'] = lastProcId;
		
		var schStatus = nlapiScheduleScript(ctx.getScriptId(), ctx.getDeploymentId(), param);
		if (schStatus=='QUEUED') {
			return false;
		}
	} else {
		return true;
	}
}