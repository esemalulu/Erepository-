function callDmdwreApi (payload) {
    var restletUrl = 'http://initium-commerce-dev.apigee.net/v1/ecomplatformapi/pricebooks/full';
    var headers = new Array();
    headers['Content-Type'] = 'applicaton/xml';
    var method = 'POST';

	var restResponse = nlapiRequestURL(restletUrl, payload, headers, null, method);
}


function getPricebook () {
    var price;
    var id;
    var search = nlapiLoadSearch('item','customsearch93');
    var allResults = search.runSearch ();
    var searchResults = JSON.parse(JSON.stringify(allResults.getResults(0,1000)));

xml = '<?xml version="1.0" encoding="UTF-8"?><pricebooks xmlns="http://www.demandware.com/xml/impex/pricebook/2006-10-31" xmlns:fo="http://www.w3.org/1999/XSL/Format"><pricebook><header pricebook-id="cad-list-prices"><currency>CAD</currency><display-name xml:lang="x-default">List Prices</display-name><online-flag>true</online-flag></header><price-tables>';

 // Contents 
 for(var i=0;i<searchResults.length;i++)
 {
        //nlapiLogExecution ('DEBUG', "Item: ", JSON.stringify(searchResults[i]));
        price = searchResults[i].columns.baseprice;
        id = searchResults[i].columns.externalid;
        if (id != undefined){
            id =  id.name;
             xml += '<price-table product-id="'+id+'">';
             xml += '<amount quantity="1">'+price+'</amount>';
             xml += '</price-table>';
           //if (i%150 == 0 && i!=0) {
            nlapiLogExecution ('DEBUG', "Count: ", totalCount);
            if (i == 999) {
                totalCount = totalCount + i;
                searchResults = JSON.parse(JSON.stringify(allResults.getResults(totalCount+1,totalCount+1001)));
                i = 0;
            }
            //    xml += '</price-tables></pricebook></pricebooks>';
                //callDmdwreApi (xml);
              //  xml = '<?xml version="1.0" encoding="UTF-8"?><pricebooks xmlns="http://www.demandware.com/xml/impex/pricebook/2006-10-31" xmlns:fo="http://www.w3.org/1999/XSL/Format"><pricebook><header pricebook-id="cad-list-prices"><currency>CAD</currency><display-name xml:lang="x-default">List Prices</display-name><online-flag>true</online-flag></header><price-tables>';
           //} 

        }
 }
xml += '</price-tables></pricebook></pricebooks>';
//callDmdwreApi (xml);

var file = nlapiCreateFile('pricebook.xml', 'XMLDOC', xml);
file.setFolder (222);
nlapiSubmitFile (file);

 return "FINISHED";
}

	function setRecoveryPoint()
{
 var state = nlapiSetRecoveryPoint(); //100 point governance
 if( state.status == 'SUCCESS' ) return;  //we successfully create a new recovery point
 if( state.status == 'RESUME' ) //a recovery point was previously set, we are resuming due to some unforeseen error
 {
  nlapiLogExecution("ERROR", "Resuming script because of " + state.reason+".  Size = "+ state.size);
  handleScriptRecovery();
 }
 else if ( state.status == 'FAILURE' )  //we failed to create a new recovery point
 {
     nlapiLogExecution("ERROR","Failed to create recovery point. Reason = "+state.reason + " / Size = "+ state.size);
  handleRecoveryFailure(state);
 }
}
 
function checkGovernance()
{
 var context = nlapiGetContext();
 if( context.getRemainingUsage() >= '9998' )
 {
  var state = nlapiYieldScript();
  if( state.status == 'FAILURE')
     {
      nlapiLogExecution("ERROR","Failed to yield script, exiting: Reason = "+state.reason + " / Size = "+ state.size);
   throw "Failed to yield script";
  } 
  else if ( state.status == 'RESUME' )
  {
   nlapiLogExecution("AUDIT", "Resuming script because of " + state.reason+".  Size = "+ state.size);
  }
  // state.status will never be SUCCESS because a success would imply a yield has occurred.  The equivalent response would be yield
 }
}
 
function handleRecoveryFailure(failure)
{
 if( failure.reason == 'SS_MAJOR_RELEASE' ) throw "Major Update of NetSuite in progress, shutting down all processes";
 if( failure.reason == 'SS_CANCELLED' ) throw "Script Cancelled due to UI interaction";
 if( failure.reason == 'SS_EXCESSIVE_MEMORY_FOOTPRINT' ) { cleanUpMemory(); setRecoveryPoint(); }//avoid infinite loop
 if( failure.reason == 'SS_DISALLOWED_OBJECT_REFERENCE' ) throw "Could not set recovery point because of a reference to a non-recoverable object: "+ failure.information; 
}
