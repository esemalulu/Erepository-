function callDmdwreApi (payload) {
    var restletUrl = 'http://initium-commerce-dev.apigee.net/v1/ecomplatformapi/inventory/full';
    var headers = new Array();
    headers['Content-Type'] = 'applicaton/xml';
    var method = 'POST';

	var restResponse = nlapiRequestURL(restletUrl, payload, headers, null, method);
}


function getInventory () {
    var allocation;
    var backorder;
    var id;
    var totalCount = 0;
    var search = nlapiLoadSearch('item','customsearch98');
    var allResults = search.runSearch ();
    var searchResults = JSON.parse(JSON.stringify(allResults.getResults(0,1000)));
    nlapiLogExecution ('DEBUG', "OUT", "****STARTED****");

    xml = '<?xml version="1.0" encoding="UTF-8"?><inventory xmlns="http://www.demandware.com/xml/impex/inventory/2007-05-31" xmlns:fo="http://www.w3.org/1999/XSL/Format"><inventory-list><header list-id="inventory"><default-instock>false</default-instock><description>Product Sku inventory</description><use-bundle-inventory-only>false</use-bundle-inventory-only><on-order>false</on-order></header><records>'

 // Contents 
 for(var i=0;i<searchResults.length;i++)
 {
        nlapiLogExecution ('DEBUG', "Count: ", totalCount);
                                    /*if( (i % 5) == 0 ) setRecoveryPoint(); //every 5 orders, we want to set a recovery point so that, in case of an unexpected server failure, we resume from the current "i" index instead of 0
                               nlapiLogExecution ('DEBUG', "GOV", "Trying to check governance...");
                                checkGovernance();*/
        nlapiLogExecution ('DEBUG', "Item: ", JSON.stringify(searchResults[i]));
        allocation = searchResults[i].columns.quantityonhand;
        backorder = searchResults[i].columns.quantitybackordered;
        id = searchResults[i].columns.externalid;
        if (id != undefined){
            id =  id.name;
             xml += '<record product-id="'+id+'">';
            if (allocation == undefined) {
                allocation = 0;
            }
             xml += '<allocation>'+allocation+'</allocation>';
             if (backorder == undefined) {
                backorder = 0;
             }
			xml += '<perpetual>false</perpetual><preorder-backorder-handling>none</preorder-backorder-handling><preorder-backorder-allocation>'+backorder+'</preorder-backorder-allocation>';
             xml += '</record>';
           /*if (i%150 == 0 && i!=0) {
                xml += '<records></inventory-list></inventory>';
                callDmdwreApi (xml);
				xml = '<?xml version="1.0" encoding="UTF-8"?><inventory xmlns="http://www.demandware.com/xml/impex/inventory/2007-05-31" xmlns:fo="http://www.w3.org/1999/XSL/Format"><inventory-list><header list-id="inventory"><default-instock>false</default-instock><description>Product Sku inventory</description><use-bundle-inventory-only>false</use-bundle-inventory-only><on-order>false</on-order></header><records>'
           } */

        }
        if (i == 999) {
            totalCount = totalCount + i;
            searchResults = JSON.parse(JSON.stringify(allResults.getResults(totalCount+1,totalCount+1001)));
            i = 0;
        }
 }
xml += '</records></inventory-list></inventory>';
//callDmdwreApi (xml);

var file = nlapiCreateFile('inventory.xml', 'XMLDOC', xml);
file.setFolder (222);
nlapiSubmitFile (file);
    nlapiLogExecution ('DEBUG', "OUT", "****FINISHED****");
 return "FINISHED";
}

	function setRecoveryPoint()
{
 var state = nlapiSetRecoveryPoint(); //100 point governance
 if( state.status == 'SUCCESS' ) return;  //we successfully create a new recovery point
 if( state.status == 'RESUME' ) //a recovery point was previously set, we are resuming due to some unforeseen error
 {
  nlapiLogExecution("ERROR", "Resuming script because of " + state.reason+".  Size = "+ state.size);
  handleScriptRecovery();
 }
 else if ( state.status == 'FAILURE' )  //we failed to create a new recovery point
 {
     nlapiLogExecution("ERROR","Failed to create recovery point. Reason = "+state.reason + " / Size = "+ state.size);
  handleRecoveryFailure(state);
 }
}
 
function checkGovernance()
{
 var context = nlapiGetContext();
 if( context.getRemainingUsage() >= '9998' )
 {
  var state = nlapiYieldScript();
  if( state.status == 'FAILURE')
     {
      nlapiLogExecution("ERROR","Failed to yield script, exiting: Reason = "+state.reason + " / Size = "+ state.size);
   throw "Failed to yield script";
  } 
  else if ( state.status == 'RESUME' )
  {
   nlapiLogExecution("AUDIT", "Resuming script because of " + state.reason+".  Size = "+ state.size);
  }
  // state.status will never be SUCCESS because a success would imply a yield has occurred.  The equivalent response would be yield
 }
}
 
function handleRecoveryFailure(failure)
{
 if( failure.reason == 'SS_MAJOR_RELEASE' ) throw "Major Update of NetSuite in progress, shutting down all processes";
 if( failure.reason == 'SS_CANCELLED' ) throw "Script Cancelled due to UI interaction";
 if( failure.reason == 'SS_EXCESSIVE_MEMORY_FOOTPRINT' ) { cleanUpMemory(); setRecoveryPoint(); }//avoid infinite loop
 if( failure.reason == 'SS_DISALLOWED_OBJECT_REFERENCE' ) throw "Could not set recovery point because of a reference to a non-recoverable object: "+ failure.information; 
}
