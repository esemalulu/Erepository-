/**
 * One-time script to print a list of VINs
 * 
 * @NApiVersion 2.x
 * @NScriptType MapReduceScript
 * @NModuleScope SameAccount
 */
define(['N/search', 'N/url', 'N/http','N/render','N/record','N/file', 'N/encode', 'N/runtime', 'N/render', 'N/xml'],

function(search, url, http, render, record, file, encode, runtime, render, xml) {

    /**
     * Marks the beginning of the Map/Reduce process and generates input data.
     *
     * @typedef {Object} ObjectRef
     * @property {number} id - Internal ID of the record instance
     * @property {string} type - Record type id
     *
     * @return {Array|Object|Search|RecordRef} inputSummary
     * @since 2015.1
     */
    function getInputData() {
    	/**
    	 * Gathers all Unit related data from the following:
    	 * Unit Header Information
    	 *  Retail Customer Info
    	 *  File Attachments
    	 *  Appliances
    	 * Warranty History
    	 *  Pre-Auths
    	 *  Claims
    	 *  Pre-Auths Flat Rate Codes
    	 *  Claim Flat Rate Codes
    	 *  Parts Inquiries
    	 *  Service Workorders
    	 *  Vendor Charge Backs
    	 * Cases
    	 * Related Records
    	 * Recalls
    	**/
    	
    	// create filters for the filter expressions to get all data from the listed units.
    	var filterString_1 = "formulanumeric: CASE WHEN {name} IN ('573FM3720G1202342', '573FM3720H1203136', '573FM3720H1204402', '573FM3721F1201747', '573FM3721G1202799', '573FM3722H1203848', '573FM3722H1203851', '573FM3723G1202142', '573FM3723H1203342', '573FM3724F1201600', '573FM3724G1202165', '573FM3724G1202795', '573FM3724H1203186', '573FM3724H1203852', '573FM3724H1204399', '573FM3724H1204404', '573FM3725G1202000', '573FM3725H1203584', '573FM3726F1201453', '573FM3726F1201677', '573FM3726H1203593', '573FM3728F1201535', '573FM3728G1202606', '573FM3729F1201348', '573FM3729G1202646', '573FM372XG1201988', '573FM372XH1203189', '573FM4020F1201335', '573FM4020F1201772', '573FM4020G1202664', '573FM4020G1202731', '573FM4020H1203461', '573FM4020H1204173', '573FM4020H1204495', '573FM4020H1204853', '573FM4020J1205085', '573FM4021E1101016', '573FM4021F1201327', '573FM4021G1201832', '573FM4021G1201913', '573FM4021H1202982', '573FM4021H1203162', '573FM4022G1202195', '573FM4022G1202875', '573FM4022H1203462', '573FM4022H1203705', '573FM4022H1203901', '573FM4022H1204708', '573FM4023E1100823', '573FM4023G1201797', '573FM4023G1202500', '573FM4023H1203888', '573FM4023H1203907', '573FM4023H1204877', '573FM4023J1205064', '573FM4024F1201466', '573FM4024G1202358', '573FM4024H1203656', '573FM4024H1203740', '573FM4024H1204032', '573FM4024H1204337', '573FM4025E1101035', '573FM4025F1201539', '573FM4025F1201542', '573FM4025G1201798', '573FM4025G1201946', '573FM4025H1203231', '573FM4025H1204248', '573FM4026E1101027', '573FM4026G1202524', '573FM4026G1202944', '573FM4026H1203058', '573FM4026H1203111', '573FM4026H1204517', '573FM4026J1205091', '573FM4027F1201624', '573FM4027G1201799', '573FM4027G1202872', '573FM4027H1203229', '573FM4027H1204106', '573FM4027H1204817', '573FM4027H1204834', '573FM4027J1205505', '573FM4028F1201616', '573FM4028F1201762', '573FM4028H1203157', '573FM4028H1203238', '573FM4028H1203899', '573FM4028H1204163', '573FM4028H1204244', '573FM4028H1204342', '573FM4028H1204356', '573FM4028H1204387', '573FM4028H1204454', '573FM4028H1204602', '573FM4029E1101037', '573FM4029H1203622', '573FM4029H1203801', '573FM4029H1204060', '573FM4029H1204172', '573FM4029H1204253', '573FM4029J1205215', '573FM4029J1205263', '573FM402XF1201777', '573FM402XG1202106', '573FM402XG1202252', '573FM402XH1203015', '573FM402XH1203211', '573FM402XH1203757', '573FM402XH1204276', '573FM402XH1204763', '573FM4220F1102351', '573FM422XF1103314', '573FM4231F1104263', '573FM4238F1103787', '573FM4238F1103935', '573FM4239G1201972', '573FM423XF1103273', '573FM4320F1102140', '573FM4321E1101335', '573FM4324E1101460', '573FM4324E1101698', '573FM4325E1101192', '573FM4325E1101578', '573FM4325F1102876', '573FM4327F1103012', '573FM4328F1102077', '573FM4328F1102676', '573FM4329E1101289', '573FM4329F1102136', '573FM432XF1102243', '573FM4330F1103605', '573FM4330H1203836', '573FM4331H1203456', '573FM4331H1203909', '573FM4331H1204199', '573FM4331H1204641', '573FM4332G1202377', '573FM4332H1203580', '573FM4333H1203717', '573FM4333H1204978', '573FM4334H1203872', '573FM4334H1204262', '573FM4334J1205546', '573FM4335G1202003', '573FM4335H1203413', '573FM4336H1203453', '573FM4336H1203582', '573FM4337F1103603', '573FM4337G1202004', '573FM4337G1202665', '573FM4339G1202022', '573FM4339H1204449', '573FM433XG1202935', '573FM433XH1203410', '573FM433XH1203455', '573FM433XH1204105', '573FM433XH1204671', '573FM433XJ1205552', '573FM4430J1205395', '573FM4434H1204440', '573FM4435H1204575', '573FM4435J1205232', '573FM443XH1204393', '573FM4530G1202200', '573FM4530H1204014', '573FM4530H1204076', '573FM4530H1204840', '573FM4531G1202643', '573FM4532H1203642', '573FM4532H1204077', '573FM4532H1204080', '573FM4533H1204413', '573FM4533J1205292', '573FM4534G1202409', '573FM4534H1203495', '573FM4534H1203514', '573FM4534H1204078', '573FM4535G1202225', '573FM4535H1203036', '573FM4535H1203182', '573FM4536G1202413', '573FM4536G1202539', '573FM4536G1202637', '573FM4536H1203336', '573FM4536J1205075', '573FM4537H1204947', '573FM4539G1202406', '573FM4539G1202888', '573FM4539G1202910', '573FM4539H1203038', '573FM4539J1205152', '573FM453XH1204408', '573FM4630H1203024', '573FM4630H1203055', '573FM4630H1204710', '573FM4632F1201403', '573FM4634H1204158', '573FM4635G1202241', '573FM4636F1201727', '573FM4637G1202063', '573FM4637G1202631', '573FM4637H1204316', '573FM4639J1205103', '573FM463XG1202445', '573FM463XH1204018', '573FR2727J3406207', '573FR2929J3405198', '573FR3020H3307805', '573FR3020H3308193', '573FR3020H3308873', '573FR3020H3309148', '573FR3021H3309000', '573FR3022H3309491', '573FR3022H3310124', '573FR3023H3308043', '573FR3023H3404710', '573FR3024H3310884', '573FR3025H3308190', '573FR3025H3309372', '573FR3025H3309503', '573FR3025H3404711', '573FR3025H3405065', '573FR3026H3307789', '573FR3027H3308191', '573FR3027H3311043', '573FR3027H3404841', '573FR3028H3309351', '573FR3028H3309494', '573FR3029G3307168', '573FR302XH3311361', '573FR302XJ3405293', '573FR3120F1201149', '573FR3120H3310069', '573FR3120H3310265', '573FR3120J3405074', '573FR3121F3302544', '573FR3121G3304764', '573FR3121G3306319', '573FR3121H3309609', '573FR3121H3404669', '573FR3121H3404817', '573FR3122F1201086', '573FR3122F1201282', '573FR3123F1201114', '573FR3123H3309028', '573FR3123H3310065', '573FR3123H3311894', '573FR3123J3405165', '573FR3123J3405327', '573FR3124G3303771', '573FR3124G3307545', '573FR3124H3310897', '573FR3124H3404665', '573FR3125G3304914', '573FR3125H3404660', '573FR3126G3303786', '573FR3126H3307810', '573FR3126H3311372', '573FR3126H3311890', '573FR3126H3404666', '573FR3126H3404974', '573FR3127H3308691', '573FR3127H3309016', '573FR3127H3309615', '573FR3127H3310070', '573FR3127H3310263', '573FR3127H3311381', '573FR3127H3404675', '573FR3127J3405184', '573FR3128G3306155', '573FR3128H3309624', '573FR3128J3405162', '573TR362XH3309488', '573TR362XH3313055', '573TR3720F3302626', '573TR3720F3302982', '573TR3720H3308963', '573TR3721F3302781', '573TR3721G3305892', '573TR3721H3310611', '573TR3721H3313170', '573TR3722G3304525', '573TR3722G3304802', '573TR3722H3308897', '573TR3722H3313159', '573TR3722J3313507', '573TR3723G3305229', '573TR3723G3306459', '573TR3723H3311775', '573TR3723H3312201', '573TR3723J3314388', '573TR3724F3301964', '573TR3724F3302791') THEN 1 ELSE 0 END";
		var filterString_2 = "formulanumeric: CASE WHEN {name} IN ('573FR3129F3302906', '573FR3129G3306973', '573FR3129H3308210', '573FR3129H3309034', '573FR3129H3310068', '573FR3129H3311902', '573FR3129H3404810', '573FR312XF3301683', '573FR312XH3404833', '573FR3220G3303796', '573FR3220G3305189', '573FR3220G3306164', '573FR3220H3309342', '573FR3220H3310054', '573FR3220H3310684', '573FR3220H3404631', '573FR3220H3404757', '573FR3221F1201210', '573FR3221H3311469', '573FR3221H3404721', '573FR3221H3404900', '573FR3221J3405096', '573FR3221J3405356', '573FR3222E3300010', '573FR3222F1201183', '573FR3222G3304366', '573FR3222G3306490', '573FR3222H3309052', '573FR3222H3310041', '573FR3222H3310668', '573FR3222H3310671', '573FR3222H3311335', '573FR3223F1200818', '573FR3223F1201161', '573FR3223F3302186', '573FR3223H3310680', '573FR3223H3404641', '573FR3223H3404879', '573FR3223H3404882', '573FR3223H3404901', '573FR3224F1200889', '573FR3224G3306846', '573FR3224H3309053', '573FR3224H3310042', '573FR3224H3310672', '573FR3224H3311479', '573FR3224H3311871', '573FR3224H3404776', '573FR3225E1200625', '573FR3225H3311474', '573FR3225J3405148', '573FR3226F1200666', '573FR3226G3303396', '573FR3226G3307111', '573FR3226H3310141', '573FR3226H3311340', '573FR3226H3311483', '573FR3226H3311872', '573FR3226H3404889', '573FR3226J3405157', '573FR3226J3405207', '573FR3226J3406132', '573FR3227E1200531', '573FR3227F3301915', '573FR3227H3310682', '573FR3228F3303107', '573FR3228H3309881', '573FR3228H3310674', '573FR3228H3311467', '573FR3228H3311470', '573FR3228H3311730', '573FR3228H3312666', '573FR3228H3404604', '573FR3228H3404649', '573FR3228H3404893', '573FR3228J3405225', '573FR3229F3301527', '573FR3229H3309047', '573FR3229H3309579', '573FR3229H3310487', '573FR3229H3404918', '573FR3229H3404949', '573FR3229H3405034', '573FR322XG3303790', '573FR322XH3309347', '573FR322XH3310479', '573FR322XH3310501', '573FR322XH3404894', '573FR3320F1200659', '573FR3320F1200841', '573FR3320F1200936', '573FR3320F3303049', '573FR3320G3304980', '573FR3320G3305630', '573FR3320G3305661', '573FR3320G3305790', '573FR3320G3307362', '573FR3320H3308755', '573FR3320H3308769', '573FR3320H3309887', '573FR3320H3310246', '573FR3320H3310554', '573FR3320H3311414', '573FR3320H3311574', '573FR3320H3311669', '573FR3320H3311672', '573FR3320H3312935', '573FR3320J3313301', '573FR3320J3313315', '573FR3320J3314108', '573FR3321E3300336', '573FR3321F3301066', '573FR3321F3303013', '573FR3321G3303241', '573FR3321G3303711', '573FR3321G3305636', '573FR3321G3307404', '573FR3321G3307614', '573FR3321H3308022', '573FR3321H3310174', '573FR3321H3310398', '573FR3321H3310949', '573FR3321H3311597', '573FR3321H3311924', '573FR3321H3312376', '573FR3321H3313155', '573FR3321J3313324', '573FR3322E3300314', '573FR3322E3300409', '573FR3322F1200646', '573FR3322F1200842', '573FR3322F3301111', '573FR3322F3302047', '573FR3322F3302842', '573FR3322G3303703', '573FR3322H3308529', '573FR3322H3308627', '573FR3322H3309891', '573FR3322H3310944', '573FR3322H3312077', '573FR3322H3313133', '573FR3322J3314109', '573FR3323F1200848', '573FR3323F1200879', '573FR3323F3301005', '573FR3323F3301537', '573FR3323F3301618', '573FR3323F3302476', '573FR3323F3303031', '573FR3323G3304102', '573FR3323G3304312', '573FR3323G3304696', '573FR3323G3305251', '573FR3323G3305847', '573FR3323G3305993', '573FR3323G3307002', '573FR3323G3307100', '573FR3323G3307355', '573FR3323G3307629', '573FR3323H3307860', '573FR3323H3308524', '573FR3323H3308765', '573FR3323H3308796', '573FR3323H3308989', '573FR3323H3310239', '573FR3323H3310449', '573FR3323H3310807', '573FR3323H3310810', '573FR3323H3311682', '573FR3323H3312167', '573FR3323H3313030', '573FR3323H3313156', '573FR3323J3314121', '573FR3324F3301630', '573FR3324F3303023', '573FR3324G3304111', '573FR3324G3305341', '573FR3324G3306621', '573FR3324G3306781', '573FR3324G3307011', '573FR3324G3307364', '573FR3324G3307428', '573FR3324G3307719', '573FR3324H3308001', '573FR3324H3308290', '573FR3324H3308791', '573FR3324H3310024', '573FR3324H3310170', '573FR3324H3310444', '573FR3324H3310556', '573FR3324H3310699', '573FR3324H3310704', '573FR3324H3310959', '573FR3324H3311402', '573FR3324H3312095', '573FR3324H3312100', '573FR3324H3312159', '573FR3324H3312162', '573FR3324H3312937', '573FR3324H3313022', '573FR3325E3300100', '573FR3325E3300226', '573FR3325F1200978', '573FR3325F3301460', '573FR3325F3302267', '573FR3325F3302334', '573FR3325G3304330', '573FR3325G3305798', '573FR3325G3306613', '573FR3325H3308007', '573FR3325H3308783', '573FR3325H3309710', '573FR3325H3309903', '573FR3325H3310453', '573FR3325H3310548', '573FR3325H3312168', '573FR3325H3312929', '573FR3325J3314136', '573FR3325J3314511', '573FR3326F1200651', '573FR3326F1200732', '573FR3326F3302861', '573FR3326G3303168', '573FR3326G3303459', '573FR3326G3305650', '573FR3326G3305776', '573FR3326G3306233', '573FR3326G3307415', '573FR3326H3307996', '573FR3326H3308520', '573FR3326H3308775', '573FR3326H3308792', '573FR3326H3309781', '573FR3326H3310557', '573FR3326H3310817', '573FR3326H3311689', '573FR3326H3312518', '573FR3326J3314095', '573FR3327F1200965', '573FR3327F3301816', '573FR3327G3303468', '573FR3327G3304474', '573FR3327G3304491', '573FR3327H3308297', '573FR3327H3308641', '573FR3327H3308784', '573FR3327H3309904', '573FR3327H3310812', '573FR3327H3310955', '573FR3327H3311619', '573FR3327H3312091', '573FR3327H3312690', '573FR3327H3313029', '573FR3327J3313859', '573FR3327J3314140', '573FR3328E1200133', '573FR3328F1200876', '573FR3328F3302862', '573FR3328G3303690', '573FR3328G3304483', '573FR3328G3305634', '573FR3328G3305648', '573FR3328G3307061', '573FR3328H3308289', '573FR3328H3308793', '573FR3328H3310169', '573FR3328H3310687', '573FR3328H3311578', '573FR3328H3311614', '573FR3328H3311676', '573FR3328H3311919', '573FR3328H3311922', '573FR3328H3313024', '573FR3328H3313153', '573FR3328J3313336') THEN 1 ELSE 0 END";
		var filterString_3 = "formulanumeric: CASE WHEN {name} IN ('573FR3328J3313613', '573FR3328J3314096', '573FR3328J3314101', '573FR3329F3301106', '573FR3329G3304475', '573FR3329G3306629', '573FR3329G3306999', '573FR3329H3308527', '573FR3329H3310696', '573FR3329H3310813', '573FR3329H3311587', '573FR3329H3312111', '573FR3329H3312528', '573FR3329H3312920', '573FR3329J3314107', '573FR3329J3314513', '573FR3329J3314897', '573FR332XE3300156', '573FR332XF1200913', '573FR332XF3301468', '573FR332XF3301471', '573FR332XF3301597', '573FR332XF3302054', '573FR332XF3302684', '573FR332XF3303009', '573FR332XG3303688', '573FR332XG3304310', '573FR332XG3304324', '573FR332XG3304954', '573FR332XG3305330', '573FR332XG3305778', '573FR332XG3305795', '573FR332XG3307076', '573FR332XG3307627', '573FR332XH3310397', '573FR332XH3311078', '573FR332XH3311579', '573FR332XH3312103', '573FR332XH3312344', '573FR332XJ3313628', '573FR3420G3306601', '573FR3420G3307456', '573FR3421G3306607', '573FR3421H3308410', '573FR3421H3309587', '573FR3421H3311727', '573FR3421H3312313', '573FR3421H3312473', '573FR3422G3305725', '573FR3422H3308254', '573FR3422H3309324', '573FR3422H3312997', '573FR3423G3307175', '573FR3423H3311454', '573FR3423H3312300', '573FR3424H3311723', '573FR3424H3312998', '573FR3424J3313736', '573FR3425H3309589', '573FR3425H3311455', '573FR3425H3311827', '573FR3426G3306604', '573FR3426G3307462', '573FR3426H3309584', '573FR3427G3306868', '573FR3428G3306037', '573FR3428G3306801', '573FR3428H3311837', '573FR3429H3308414', '573FR3429H3311054', '573FR3429H3312477', '573FR342XG3306525', '573FR342XG3306606', '573FR342XH3312990', '573FR3520G3304538', '573FR3520H3404799', '573FR3520J3313800', '573FR3520J3405330', '573FR3521F3301839', '573FR3521G3303284', '573FR3521G3303883', '573FR3521G3307190', '573FR3522F3301316', '573FR3522F3302501', '573FR3522G3304556', '573FR3522H3311184', '573FR3522H3404559', '573FR3522H3404741', '573FR3522H3405050', '573FR3522J3405667', '573FR3523F3301518', '573FR3523F3302314', '573FR3523F3303060', '573FR4222H3310367', '573FR4222H3310384', '573FR4222H3312538', '573FR4222J3314005', '573FR4223G3306939', '573FR4223H3307915', '573FR4223H3308921', '573FR4224H3311116', '573FR4225G3306716', '573FR4225H3311108', '573FR4226G3305526', '573FR4227G3303669', '573FR4227H3309831', '573FR4228G3305530', '573FR4228G3306709', '573FR4228G3307374', '573FR4228J3314011', '573FR4229H3308907', '573FR4229J3314017', '573FR422XG3306730', '573FR422XG3306839', '573FR422XH3307894', '573FR422XH3312190', '573FR422XJ3313880', '573FS3620F1102781', '573FS3620G1104919', '573FS3620G1105519', '573FS3620H1107708', '573FS3620H1108020', '573FS3620J1108699', '573FS3621F1103843', '573FS3621G1105318', '573FS3621G1106064', '573FS3621H1107393', '573FS3621H1107443', '573FS3622E1100660', '573FS3622F1101986', '573FS3622F1102765', '573FS3622F1102846', '573FS3622G1105179', '573FS3622G1105618', '573FS3622G1106199', '573FS3622H1106592', '573FS3622H1108049', '573FS3623E1100618', '573FS3623F1104475', '573FS3623G1105756', '573FS3623G1106146', '573FS3623H1106715', '573FS3623J1108986', '573FS3624G1105068', '573FS3624G1105619', '573FS3624G1106110', '573FS3624G1106155', '573FS3624H1106674', '573FS3624H1106769', '573FS3624H1107405', '573FS3624H1107615', '573FS3624H1107954', '573FS3624H1108389', '573FS3624J1108687', '573FS3625G1105418', '573FS3625G1105483', '573FS3625G1105614', '573FS3625G1106097', '573FS3625G1106200', '573FS3625H1106537', '573FS3625H1106540', '573FS3625H1107817', '573FS3625H1107820', '573FS3625J1108715', '573FS3626F1103157', '573FS3626F1103952', '573FS3626G1106187', '573FS3626H1106501', '573FS3626H1107552', '573FS3626H1107597', '573FS3626H1107664', '573FS3626H1108331', '573FS3627E1101545', '573FS3627F1101983', '573FS3627G1105520', '573FS3627G1105663', '573FS3627H1107074', '573FS3627H1107267', '573FS3627H1107818', '573FS3627H1107950', '573FS3627H1108273', '573FS3628F1102768', '573FS3628F1103127', '573FS3628G1105753', '573FS3628H1106905', '573FS3628H1107407', '573FS3628H1107410', '573FS3628H1108217', '573FS3629F1102830', '573FS3629F1103153', '573FS3629F1103430', '573FS3629G1104790', '573FS3629G1106149', '573FS3629G1106409', '573FS3629H1106590', '573FS362XH1106761', '573FS362XH1106940', '573FS362XH1107070', '573FS362XH1107263', '573FS362XH1108218', '573FS362XJ1108693', '573FS3721F1104490', '573FS3725F1103763', '573FS3820E1100024', '573FS3820E1100041', '573FS3820E1100461', '573FS3820F1101997', '573FS3820F1102521', '573FS3820F1103832', '573FS3820G1105016', '573FS3820G1105968', '573FS3821E1101246', '573FS3821F1103208', '573FS3821G1105025', '573FS3821G1105414', '573FS3821G1105493', '573FS3822E1101272', '573FS3822F1104593', '573FS3822G1105275', '573FS3822H1106525', '573FS3823F1102450', '573FS3823F1102528', '573FS3823F1103825', '573FS3824E1100205', '573FS3824E1100690', '573FS3824E1101323', '573FS3824G1105276', '573FS3825F1102143', '573FS3826E1101243', '573FS3826E1101498', '573FS3826G1105876', '573FS3827E1100716', '573FS3827E1101154', '573FS3827E1101400', '573FS3827E1101705', '573FS3827G1105269', '573FS3828F1101990', '573FS3829E1100023', '573FS3829E1100667', '573FS3829F1102162', '573FS3829F1102405', '573FS3829F1104588', '573FS3829G1104981', '573FS382XE1101729', '573FS382XE1101861', '573FS382XG1104696', '573FS382XH1106529', '573FS382XH1106871', '573FS4120H1107303', '573FS4120H1107513', '573FS4120H1107804', '573FS4121F1104049', '573FS4123F1104618', '573FS4123G1104684', '573FS4123H1107280', '573FS4123H1107800', '573FS4125G1105125', '573FS4126H1107645', '573FS4126J1108610', '573FS4127H1108349', '573FS4128F1104162', '573FS4128G1105166', '573FS4220H1107140', '573FS4220H1107168', '573FS4220H1107865', '573FS4220H1107915', '573FS4221G1105363', '573FS4221H1106899', '573FS4222G1106134', '573FS4222G1106263', '573FS4222H1106569', '573FS4222H1106894', '573FS4222H1107981', '573FS4222J1108750', '573FS4223G1105638') THEN 1 ELSE 0 END";
		var filterString_4 = "formulanumeric: CASE WHEN {name} IN ('573FS4223H1106497', '573FS4223H1106838', '573FS4223H1108086', '573FS4223J1108756', '573FS4224H1106993', '573FS4224H1107044', '573FS4224H1107934', '573FS4224J1108944', '573FS4225H1106579', '573FS4225H1106968', '573FS4225H1108090', '573FS4225J1108791', '573FS4225J1108936', '573FS4226G1105942', '573FS4226G1106346', '573FS4226H1107126', '573FS4227H1106891', '573FS4227H1106969', '573FS4227H1107183', '573FS4227H1107863', '573FS4228G1105716', '573FS4228G1105957', '573FS4228G1106347', '573FS4228H1106611', '573FS4228H1106737', '573FS4229G1105708', '573FS4229G1105823', '573FS4229H1107718', '573FS4229H1107864', '573FS4229J1108938', '573FS422XG1105765', '573FS422XH1107050', '573FS422XH1107081', '573FS422XH1107517', '573FS422XH1107937', '573FS4320F1102922', '573FS4320G1104669', '573FS4320H1108075', '573FS4320H1108092', '573FS4320H1108111', '573FS4321F1102489', '573FS4321F1104632', '573FS4321G1104664', '573FS4321H1108067', '573FS4322F1102694', '573FS4322F1104347', '573FS4322F1104381', '573FS4322F1104641', '573FS4322G1105015', '573FS4322G1105029', '573FS4323E1101813', '573FS4323F1102476', '573FS4323G1105427', '573FS4323G1106089', '573FS4323H1107521', '573FS4323H1107535', '573FS4323H1107891', '573FS4323H1108121', '573FS4324F1103054', '573FS4324F1104088', '573FS4324G1104738', '573FS4324G1105100', '573FS4324G1105288', '573FS4324H1106524', '573FS4324H1107088', '573FS4324H1107527', '573FS4324H1107639', '573FS4324H1108029', '573FS4324J1109168', '573FS4325F1102303', '573FS4326F1104075', '573FS4326G1104935', '573FS4326G1105048', '573FS4326J1109124', '573FS4327E1101636', '573FS4327F1102917', '573FS4327G1106385', '573FS4327H1107005', '573FS4328F1102554', '573FS4328F1104000', '573FS4328H1106705', '573FS4328J1109030', '573FS4329H1107524', '573FS4329H1108074', '573FS432XF1102233', '573FS432XF1102295', '573FS432XF1104466', '573FS432XG1104906', '573FS432XH1107533', '573FS432XJ1108624', '573FS4332J1109064', '573FS4333H1107656', '573FS4334H1108184', '573FS4339H1107208', '573TE2721H6601193', '573TE2721J5500120', '573TE2722H3402865', '573TE2725H6601231', '573TE2727H6600016', '573TE2728H6601241', '573TE2729H3401941', '573TE2729H3403480', '573TE2920J6602015', '573TE2922J6603005', '573TE2922J6603313', '573TE2923J6602817', '573TE2924J6602986', '573TE2925J6603693', '573TE2928J6602988', '573TE292XJ6603298', '573TE292XJ6603320', '573TE3021G3400300', '573TE3022H6601364', '573TE3023G3400962', '573TE3023H6600465', '573TE3023J6602223', '573TE3023J6603176', '573TE3024G3400999', '573TE3024H3403841', '573TE3024H3403869', '573TE3024H3404519', '573TE3024J6602196', '573TE3025H3402004', '573TE3026H6600847', '573TE3026H6601125', '573TE3026J6602944', '573TE3026J6603057', '573TE3027H3404322', '573TE3028H6600459', '573TE3029H3401809', '573TE3029H3404516', '573TE3029H6601118', '573TE3029J6603280', '573TE302XH3402922', '573TE3220H3402604', '573TE3220H6600517', '573TE3220H6601070', '573TE3220H6601165', '573TE3221H3402367', '573TE3221J6603691', '573TE3221J6603805', '573TE3221J6603996', '573TE3221J6606462', '573TE3222G3400481', '573TE3222H3402572', '573TE3222H6600065', '573TE3222H6600681', '573TE3222H6601071', '573TE3222J6602131', '573TE3222J6602498', '573TE3223G3400280', '573TE3223H3404430', '573TE3223H6601175', '573TE3223J6603028', '573TE3223J6604972', '573TE3224H3403366', '573TE3225G3401401', '573TE3225H3402503', '573TE3225H3403618', '573TE3225H6600514', '573TE3225H6600657', '573TE3225H6601632', '573TE3225H6601646', '573TE3226H3403918', '573TE3226J6602519', '573TE3227H6601180', '573TE3227J6603341', '573TE3228H3402432', '573TE3228H6600653', '573TE3229G3400302', '573TE3229G3400428', '573TE3229H3404254', '573TE322XH3404277', '573TE322XH6600671', '573TE322XH6601691', '573TE3320J6604264', '573TE3321J6603382', '573TE3321J6604273', '573TE3322H6601148', '573TE3322J6604072', '573TE3324H3402328', '573TE3326H3402962', '573TE3326H3403819', '573TE3326J6604947', '573TE3328G3400936', '573TE3329H6600899', '573TE332XG3400792', '573TE3620H3403374', '573TE3620H3403729', '573TE3621H6601461', '573TE3625J6602182', '573TE3627H3402206', '573TE3627J6602927', '573TR3420H3308305', '573TR3420H3309230', '573TR3420H3309387', '573TR3420H3309454', '573TR3420H3309972', '573TR3420H3310331', '573TR3420H3312225', '573TR3420H3312631', '573TR3420J3313428', '573TR3421H3308376', '573TR3421H3308393', '573TR3421H3308572', '573TR3421H3308698', '573TR3421H3309446', '573TR3421H3312234', '573TR3422F3400089', '573TR3422H3307981', '573TR3422H3309228', '573TR3422H3311223', '573TR3422H3312436', '573TR3422J3315178', '573TR3423H3308556', '573TR3423H3311215', '573TR3423H3311540', '573TR3423H3312431', '573TR3424H3308565', '573TR3424H3309991', '573TR3425F3400099', '573TR3425H3310986', '573TR3425H3312432', '573TR3426F3400094', '573TR3426H3310334', '573TR3426H3311001', '573TR3426H3312441', '573TR3426H3313072', '573TR3427H3309631', '573TR3427H3309984', '573TR3427H3310469', '573TR3427H3310472', '573TR3427H3310567', '573TR3427H3310987', '573TR3427H3311542', '573TR3427H3312433', '573TR3428H3308570', '573TR3428H3309444', '573TR3428H3309993', '573TR3429F3400106', '573TR342XH3309221', '573TR342XH3310563', '573TR3620G3304394', '573TR3620G3305366', '573TR3620G3305884', '573TR3620H3308592', '573TR3620H3309077', '573TR3621G3303738', '573TR3621H3312568', '573TR3621H3312571', '573TR3621H3313042', '573TR3624H3309065', '573TR3625G3303726', '573TR3625G3304021', '573TR3625G3305380', '573TR3625H3311519', '573TR3625H3312573', '573TR3626G3305582', '573TR3626G3306828', '573TR3626H3309066', '573TR3626H3309472', '573TR3627G3304196', '573TR3627H3309481', '573TR3627H3310291', '573TR3627J3314041', '573TR3628F3302584', '573TR3628H3311515', '573TR3628H3311983', '573TR3629H3308932', '573TR3629H3310342', '573TR3629J3314025', '573TR362XH3308342', '573TR3724G3303537', '573TR3724G3303618', '573TR3724G3305353', '573TR3724H3308366', '573TR3724H3310117', '573TR3724H3310604', '573TR3724H3311560', '573TR3725G3304177', '573TR3725G3305006', '573TR3725G3307757', '573TR3725H3307761', '573TR3726G3305323', '573TR3726G3307752', '573TR3727G3303256', '573TR3727G3304164', '573TR3727G3306111', '573TR3727J3314166', '573TR3728F3303121', '573TR3728G3303539', '573TR3728H3308886', '573TR3729G3307681', '573TR3729H3308878', '573TR3729H3310615', '573TR3729H3312462', '573TR3729H3312896', '573TR372XG3303610', '573TR372XG3306099', '573TR372XG3306460', '573TR372XG3307494', '573TR372XH3308551', '573TR372XH3312213', '573TR3820H3311277', '573TR3820H3311506', '573TR3820H3311747', '573TR3820H3313210', '573TR3820J3313407', '573TR3820J3314332', '573TR3821H3309408', '573TR3821H3309442', '573TR3821H3310588', '573TR3821H3311501', '573TR3822H3308719', '573TR3822H3309241', '573TR3822H3313211', '573TR3822J3313554', '573TR3823H3313184', '573TR3824H3309256', '573TR3824H3309953', '573TR3824H3311976', '573TR3824H3313212', '573TR3824J3313765', '573TR3825H3310738', '573TR3825H3312621', '573TR3825H3312828', '573TR3826H3310098', '573TR3826H3310313', '573TR3826H3312823', '573TR3826H3312868', '573TR3827H3311258', '573TR3827H3311499', '573TR3827J3313419', '573TR3827J3313551', '573TR3828H3311009', '573TR3828H3311253', '573TR3828H3311267', '573TR3828H3312824', '573TR3828H3312869', '573TR3829H3310581', '573TR3829H3310743', '573TR3829H3311262', '573TR3829H3311505', '573TR3829H3312251', '573TR3829H3312587', '573TR3829H3312797', '573TR3829J3313406', '573TR382XH3311237', '573TR382XH3311741', '573TR382XJ3313771') THEN 1 ELSE 0 END";
		var filterString_5 = "formulanumeric: CASE WHEN {name} IN ('573FR3523G3306638', '573FR3523H3404697', '573FR3523H3404795', '573FR3523H3405039', '573FR3523J3405080', '573FR3523J3405130', '573FR3524H3308447', '573FR3524H3311185', '573FR3524H3404594', '573FR3524J3405315', '573FR3525F3301424', '573FR3525G3304549', '573FR3525G3305524', '573FR3525G3307659', '573FR3525H3309543', '573FR3525H3310420', '573FR3526G3306634', '573FR3526G3306763', '573FR3526G3307203', '573FR3526H3309549', '573FR3526H3310927', '573FR3526H3404595', '573FR3527G3303290', '573FR3527H3308443', '573FR3527H3311181', '573FR3527H3404590', '573FR3527H3404704', '573FR3527H3404802', '573FR3528F3301322', '573FR3528F3301773', '573FR3528G3303282', '573FR3528G3303895', '573FR3528G3305386', '573FR3528H3308452', '573FR3528H3311190', '573FR3528H3404808', '573FR3529G3305400', '573FR3529G3306479', '573FR3529H3404803', '573FR352XG3304546', '573FR352XG3305471', '573FR352XG3306636', '573FR352XH3309117', '573FR352XH3311191', '573FR352XH3405054', '573FR352XJ3405366', '573FR3620F3300759', '573FR3620F3300907', '573FR3620F3301023', '573FR3620F3301118', '573FR3620G3303842', '573FR3620G3305770', '573FR3620G3306031', '573FR3620G3307650', '573FR3620H3309299', '573FR3620H3309822', '573FR3620H3310212', '573FR3620H3310520', '573FR3620H3311425', '573FR3620H3311635', '573FR3620H3311649', '573FR3620H3312140', '573FR3620H3312400', '573FR3620H3312963', '573FR3620J3314055', '573FR3621F3302634', '573FR3621G3303199', '573FR3621G3303493', '573FR3621G3305051', '573FR3621G3305096', '573FR3621G3305177', '573FR3621G3305180', '573FR3621G3305681', '573FR3621G3305759', '573FR3621G3306538', '573FR3621G3307592', '573FR3621H3308257', '573FR3621H3309747', '573FR3621H3311319', '573FR3621H3311322', '573FR3621H3311630', '573FR3621H3311854', '573FR3621H3311949', '573FR3621H3312065', '573FR3621H3312146', '573FR3621H3312499', '573FR3621H3312955', '573FR3621H3312972', '573FR3622F3301587', '573FR3622G3303485', '573FR3622G3305057', '573FR3622G3306936', '573FR3622H3308266', '573FR3622H3308848', '573FR3622H3309997', '573FR3622H3310017', '573FR3622H3310633', '573FR3622H3310793', '573FR3622H3311622', '573FR3622H3312057', '573FR3622H3312141', '573FR3622J3313991', '573FR3623E1200455', '573FR3623F3301579', '573FR3623G3303477', '573FR3623G3305049', '573FR3623G3307237', '573FR3623G3307240', '573FR3623H3308499', '573FR3623H3308812', '573FR3623H3308826', '573FR3623H3309913', '573FR3623H3310205', '573FR3623H3310219', '573FR3623H3311628', '573FR3623H3311936', '573FR3623H3312505', '573FR3623H3312973', '573FR3623H3313248', '573FR3623J3313840', '573FR3623J3313983', '573FR3624E1200237', '573FR3624F3302241', '573FR3624F3302515', '573FR3624G3306193', '573FR3624H3310519', '573FR3624H3312075', '573FR3624H3312755', '573FR3625F3300627', '573FR3625F3302233', '573FR3625G3304307', '573FR3625G3305912', '573FR3625G3306672', '573FR3625H3308486', '573FR3625H3308830', '573FR3625H3309816', '573FR3625H3309931', '573FR3625H3310013', '573FR3625H3310190', '573FR3625H3310626', '573FR3625H3311081', '573FR3625H3311095', '573FR3625H3311324', '573FR3625H3311937', '573FR3625H3312330', '573FR3625J3313600', '573FR3626E1200479', '573FR3626G3303201', '573FR3626G3303649', '573FR3626G3305109', '573FR3626G3305451', '573FR3626G3306194', '573FR3626G3306955', '573FR3626H3308268', '573FR3626H3309744', '573FR3626H3310506', '573FR3626H3310618', '573FR3626H3310635', '573FR3626H3311087', '573FR3626H3311428', '573FR3626H3311641', '573FR3626H3312966', '573FR3626H3313258', '573FR3627E3300059', '573FR3627F3300824', '573FR3627F3302511', '573FR3627F3302640', '573FR3627H3307890', '573FR3627H3308487', '573FR3627H3309817', '573FR3627H3309932', '573FR3627H3310207', '573FR3627H3311096', '573FR3627H3311440', '573FR3627H3311941', '573FR3627H3312331', '573FR3627H3313110', '573FR3627H3313124', '573FR3628E1200483', '573FR3628F3301559', '573FR3628F3302646', '573FR3628F3303098', '573FR3628G3303331', '573FR3628G3303569', '573FR3628G3303846', '573FR3628G3304382', '573FR3628G3307248', '573FR3628H3307977', '573FR3628H3308840', '573FR3628H3309745', '573FR3628H3309762', '573FR3628H3310183', '573FR3628H3310636', '573FR3628H3311642', '573FR3628H3312127', '573FR3628J3313848', '573FR3629F3301151', '573FR3629G3305914', '573FR3629G3306934', '573FR3629G3306951', '573FR3629H3307762', '573FR3629H3308507', '573FR3629H3310225', '573FR3629H3310757', '573FR3629H3311956', '573FR3629H3312492', '573FR3629H3312749', '573FR362XE3300217', '573FR362XG3303198', '573FR362XG3305095', '573FR362XG3307588', '573FR362XH3308838', '573FR362XH3309195', '573FR362XH3310184', '573FR362XH3310198', '573FR362XH3311089', '573FR362XH3311433', '573FR362XH3312324', '573FR362XH3312503', '573FR362XJ3313379', '573FR362XJ3313608', '573FR3820G3303756', '573FR3820G3304079', '573FR3820H3308425', '573FR3820H3311292', '573FR3821G3304754', '573FR3822G3305427', '573FR3822G3306691', '573FR3822H3311147', '573FR3822H3311696', '573FR3822H3312413', '573FR3823F3300591', '573FR3823F3303071', '573FR3823G3304089', '573FR3824F3300888', '573FR3824G3305168', '573FR3824H3309786', '573FR3824H3310971', '573FR3824H3311697', '573FR3824H3312414', '573FR3825E3300428', '573FR3825F3300608', '573FR3825G3306703', '573FR3825G3307186', '573FR3825H3309540', '573FR3825H3312406', '573FR3826F3303064', '573FR3826H3308462', '573FR3827F3302294', '573FR3827G3304225', '573FR3827H3311693', '573FR3827H3313086', '573FR3828F3301509', '573FR3828G3307599', '573FR3829G3305666', '573FR3829H3308424', '573FR3829H3310643', '573FR382XF3302709', '573FR382XG3305160', '573FR382XG3306700', '573FR382XH3310540', '573FR4220G3306834', '573FR4220G3307269', '573FR4220H3308472', '573FR4220H3308908', '573FR4220J3314018', '573FR4220J3314147', '573FR4220J3314536', '573FR4221G3307264', '573FR4221J3313718', '573FR4222G3306740', '573FR4222G3306835', '573FR4222H3308604') THEN 1 ELSE 0 END";

		// array and objects used to get all the unit data.
		var unitDataJSONArray = new Array();
    	var memberObject = new Object();
    	var unitHeaderObject = new Object();
    	var retailCustomerArray = new Array();
    	var fileAttachmentsArray = new Array();
    	var appliancesArray = new Array();
    	
    	// Initialize the unit header objects used in the Unit record search.  Set arrays to insert additional searches with data related to the unit.
    	unitHeaderObject = {};
    	unitHeaderObject.retailCustomerArray = [];
    	unitHeaderObject.fileAttachmentsArray = [];
    	unitHeaderObject.appliancesArray = [];
    	unitHeaderObject.preAuthArray = [];
    	unitHeaderObject.claimArray = [];
    	unitHeaderObject.preAuthOpLineArray = [];
    	unitHeaderObject.claimOpLineArray = [];
    	unitHeaderObject.partsInquiryArray = [];
    	unitHeaderObject.serviceWorkOrderArray = [];
    	unitHeaderObject.vendorChargebackArray = [];
    	unitHeaderObject.casesArray = [];
    	unitHeaderObject.relatedRecordsArray = [];
    	unitHeaderObject.recallsArray = [];
    	
    	var keys = new Array();
    	var firstResult = true;

      	var unitIdsArray = new Array();
    	try{
    		var unitSearchResults = search.create({
    			type: 'customrecordrvsunit',
    			filters: [
    			          [filterString_1, 'equalto', '1'],
    					  'OR',
    					  [filterString_2, 'equalto', '1'],
    					  'OR',
    					  [filterString_3, 'equalto', '1'],
    					  'OR',
    					  [filterString_4, 'equalto', '1'],
    					  'OR',
    					  [filterString_5, 'equalto', '1']
    					 ],
        		columns: [
        		          //Header Information
        		          search.createColumn({name: 'internalid', label: 'Unit Id'}),
        		          search.createColumn({name: 'name', sort: search.Sort.ASC, label: 'Name'}),
        		          search.createColumn({name: 'custrecordunit_serialnumber', label: 'Serial Number'}),
        		          search.createColumn({name: 'custrecordunit_salesorder', label: 'Sales Order'}),
        		          search.createColumn({name: 'custrecordunit_backlog', label: 'Backlog'}),
        		          search.createColumn({name: 'custrecordunit_dealer', label: 'Dealer'}),
        		          search.createColumn({name: 'custrecordunit_series', label: 'Series'}),
        		          search.createColumn({name: 'custrecordunit_model', label: 'Model'}),
        		          search.createColumn({name: 'custrecordunit_onlinedate', label: 'Online Date'}),
        		          search.createColumn({name: 'custrecordunit_offlinedate', label: 'Scheduled Offline Date'}),
        		          search.createColumn({name: 'custrecordunit_actualofflinedate', label: 'Actual Offline Date'}),
        		          search.createColumn({name: 'custrecordunit_location', label: 'Location'}),
        		          search.createColumn({name: 'custrecordunit_salesrep', label: 'Sales Rep'}),
        		          search.createColumn({name: 'custrecordunit_leftweight', label: 'Left Weight (Lbs)'}),
        		          search.createColumn({name: 'custrecordunit_rightweight', label: 'Right Weight (Lbs)'}),
        		          search.createColumn({name: 'custrecordunit_hitchweight', label: 'Hitch Weight (Lbs)'}),
        		          search.createColumn({name: 'custrecordunit_actualshipweight', label: 'Actual Ship Weight'}),
        		          search.createColumn({name: 'custrecordunit_axleconfiguration', label: 'Axle Configuration'}),
        		          search.createColumn({name: 'custrecordunit_shipdate', label: 'Current Ship Date'}),
        		          search.createColumn({name: 'custrecordunit_gd_dpu', label: 'DPU'}),
        		          search.createColumn({name: 'custrecordunit_datecompleted', label: 'Date Completed'}),
        		          search.createColumn({name: 'created', label: 'Date Created'}),
        		          search.createColumn({name: 'custrecordunit_dispatchdate', label: 'Dispatch Date'}),
        		          search.createColumn({name: 'custrecordunit_flooringstatus', label: 'Flooring Status'}),
        		          search.createColumn({name: 'custrecordunit_freshwatercapacity', label: 'Fresh Water Capacity (Gal)'}),
        		          search.createColumn({name: 'custrecordgd_frontwrapcomplete', label: 'Front Wrap Complete'}),
        		          search.createColumn({name: 'custrecordunit_gawrallaxles', label: 'GAWR (All Axles) Lbs'}),
        		          search.createColumn({name: 'custrecordunit_gawrsingleaxle', label: 'GAWR (Single Axle) (Lbs)'}),
        		          search.createColumn({name: 'custrecordgd_hasspecialpaint', label: 'GD Has Special Paint'}),
        		          search.createColumn({name: 'custrecordgd_unitpaintnotes', label: 'GD Paint Notes'}),
        		          search.createColumn({name: 'custrecordgd_shipping_hold', label: 'GD Shipping Hold'}),
        		          search.createColumn({name: 'custrecordgd_transportationnotes', label: 'GD Transportation Notes'}),
        		          search.createColumn({name: 'custrecordunit_gvwrlbs', label: 'GVWR Lbs'}),
        		          search.createColumn({name: 'custrecordunit_graywatercapacity', label: 'Gray Water Capacity (Gal)'}),
        		          search.createColumn({name: 'custrecordhasopenchangeorders', label: 'Has Open Change Orders'}),
        		          search.createColumn({name: 'isinactive', label: 'Inactive'}),
        		          search.createColumn({name: 'custrecordunit_lpgasweight', label: 'LP Gas Weight (Lbs)'}),
        		          search.createColumn({name: 'lastmodified', label: 'Last Modified'}),
        		          search.createColumn({name: 'lastmodifiedby', label: 'Last Modified By'}),
        		          search.createColumn({name: 'custrecordunit_msomodelname', label: 'MSO Model Name'}),
        		          search.createColumn({name: 'custrecordunit_modelyear', label: 'Model Year'}),
        		          search.createColumn({name: 'custrecordnowarranty', label: 'No Warranty Available'}),
        		          search.createColumn({name: 'custrecordunit_orderdate', label: 'Order Date'}),
        		          search.createColumn({name: 'custrecordunit_originaldealer', label: 'Original Dealer'}),
        		          search.createColumn({name: 'custrecordrvs_originalshipdate', label: 'Original Ship Date'}),
        		          search.createColumn({name: 'custrecordunit_psi', label: 'PSI'}),
        		          search.createColumn({name: 'custrecordunit_productioncompletedate', label: 'Production Complete Date'}),
        		          search.createColumn({name: 'custrecordunit_productionrunsortorder', label: 'Production Run Sort Order'}),
        		          search.createColumn({name: 'custrecordunit_status', label: 'Production Status'}),
        		          search.createColumn({name: 'custrecordunit_purchaseordernum', label: 'Purchase Order #'}),
        		          search.createColumn({name: 'custrecordunit_qastatus', label: 'QA Status'}),
        		          search.createColumn({name: 'custrecordunit_reportedtorviadate', label: 'Reported To RVIA Date'}),
        		          search.createColumn({name: 'custrecordunit_retailpurchaseddate', label: 'Retail Sold Date'}),
        		          search.createColumn({name: 'custrecordunit_retailsoldnotregistered', label: 'Retail Sold, Not Registered'}),
        		          search.createColumn({name: 'custrecordunit_rim', label: 'Rim'}),
        		          search.createColumn({name: 'custrecordunit_salesreptext', label: 'Sales Rep (Text-Only)'}),
        		          search.createColumn({name: 'custrecordunit_shippingstatus', label: 'Shipping Status'}),
        		          search.createColumn({name: 'custrecordgd_unit_subseries', label: 'Sub Series'}),
        		          search.createColumn({name: 'custrecordunit_systemshold', label: 'Systems Hold'}),
        		          search.createColumn({name: 'custrecordunit_tire', label: 'Tire'}),
        		          search.createColumn({name: 'custrecordunit_transportco', label: 'Transport Co.'}),
        		          search.createColumn({name: 'custrecordunit_typeofvehicle', label: 'Type of Vehicle'}),
        		          search.createColumn({name: 'custrecordunit_uvw', label: 'UVW (Lbs)'}),
        		          search.createColumn({name: 'custrecordunit_warrantyexpirationdate', label: 'Warranty Expiration Date'}),
        		          search.createColumn({name: 'custrecordunit_receiveddate', label: 'Warranty Registration Received Date'}),
        		          search.createColumn({name: 'custrecordunit_wastewatercapacity', label: 'Waste Water Capacity (Gal)'}),
        		          search.createColumn({name: 'custrecordunit_waterheatercapacity', label: 'Water Heater Capacity (Gal)'}),
        		          search.createColumn({name: 'custrecordrvs_weightdiscrepancyreason', label: 'Weight Discrepancy Reason'}),
        		          search.createColumn({name: 'custrecordyardnotes', label: 'Yard Notes'}),
        		          //Retail Custom Information
        		          search.createColumn({name: 'internalid', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT'}),
        		          search.createColumn({name: 'name', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT', label: 'Name'}),
					      search.createColumn({name: 'custrecordunitretailcustomer_title', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT', label: 'Title'}),
					      search.createColumn({name: 'custrecordunitretailcustomer_firstname', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT', label: 'First Name'}),
					      search.createColumn({name: 'custrecordunitretailcustomer_lastname', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT', label: 'Last Name'}),
					      search.createColumn({name: 'custrecordunitretailcustomer_middlename', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT', label: 'Middle Name'}),
					      search.createColumn({name: 'custrecordunitretailcustomer_spouse', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT', label: 'Spouse'}),
					      search.createColumn({name: 'custrecordunitretailcustomer_address1', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT', label: 'Address 1'}),
					      search.createColumn({name: 'custrecordunitretailcustomer_address2', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT', label: 'Address 2'}),
					      search.createColumn({name: 'custrecordunitretailcustomer_country', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT', label: 'Country'}),
					      search.createColumn({name: 'custrecordunitretailcustomer_city', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT', label: 'City'}),
					      search.createColumn({name: 'custrecordunitretailcustomer_state', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT', label: 'State'}),
					      search.createColumn({name: 'custrecordunitretailcustomer_zipcode', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT', label: 'Zipcode'}),
					      search.createColumn({name: 'custrecordunitretailcustomer_phone', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT', label: 'Phone #'}),
					      search.createColumn({name: 'custrecordunitretailcustomer_cellphone', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT', label: 'Cell Phone'}),
					      search.createColumn({name: 'custrecordunitretailcustomer_email', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT', label: 'Email'}),
					      search.createColumn({name: 'custrecordunitretailcustomer_retailsold', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT', label: 'Retail Sold Date'}),
					      search.createColumn({name: 'custrecordunitretailcustomer_registrcvd', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT', label: 'Registration Received Date'}),
					      search.createColumn({name: 'custrecordunitretailcustomer_dealsalesrp', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT', label: 'Dealer Sales Rep'}),
					      search.createColumn({name: 'custrecordunitretailcustomer_dsalesrp2', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT', label: 'Secondary Dealer Sales Rep'}),
					      search.createColumn({name: 'custrecordunitretailcustomer_currentcust', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT', label: 'Current Customer'}),
					      search.createColumn({name: 'custrecordunitretailcustomer_dealer', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT', label: 'Dealer'}),
					      //File Attachments
					      search.createColumn({name: 'internalid', join: 'file'}),
					      search.createColumn({name: 'name', join: 'file', label: 'Name'}),
					      search.createColumn({name: 'documentsize', join: 'file', label: 'Size (KB)'}),
					      search.createColumn({name: 'filetype', join: 'file', label: 'Type'}),
					      search.createColumn({name: 'owner', join: 'file', label: 'Owner'}),
					      search.createColumn({name: 'description', join: 'file', label: 'Description'}),
					      search.createColumn({name: 'created', join: 'file', label: 'Date Created'}),
					      //Appliances
					      search.createColumn({name: 'internalid', join: 'CUSTRECORDUNITAPPLIANCES_UNIT'}),
					      search.createColumn({name: 'custrecordunitappliances_type', join: 'CUSTRECORDUNITAPPLIANCES_UNIT', label: 'Type'}),
					      search.createColumn({name: 'custrecordunitappliances_desc', join: 'CUSTRECORDUNITAPPLIANCES_UNIT', label: 'Description'}),
					      search.createColumn({name: 'custrecordunitappliances_brandname', join: 'CUSTRECORDUNITAPPLIANCES_UNIT', label: 'Brand Name'}),
					      search.createColumn({name: 'custrecordunitappliances_modelnumber', join: 'CUSTRECORDUNITAPPLIANCES_UNIT', label: 'Model #'}),
					      search.createColumn({name: 'custrecordunitappliances_serialnumber', join: 'CUSTRECORDUNITAPPLIANCES_UNIT', label: 'Serial #'}),
					      search.createColumn({name: 'custrecordvendor', join: 'CUSTRECORDUNITAPPLIANCES_UNIT', label: 'Vendor'})
        		       ]
			}).runPaged({pageSize: 1000});
    		unitSearchResults.pageRanges.forEach(function(pageRange) {
    			unitSearchResults.fetch({index: pageRange.index}).data.forEach(function(result) {
					if (firstResult || unitHeaderObject.internalid != result.id) {
						//does not exist yet, add to the array, this also means we are switching to a new unit, create a new object header to add to the main array.
						if (firstResult) {
							firstResult = false;
						} else {
							// All Unit data is set for this specific unit, add to the main unit data array.
							unitDataJSONArray.push(unitHeaderObject);
							
							// clear the arrays and object for use of the next Unit.
							unitHeaderObject = {};
							unitHeaderObject.retailCustomerArray = [];
							unitHeaderObject.fileAttachmentsArray = [];
							unitHeaderObject.appliancesArray = [];
							unitHeaderObject.preAuthArray = [];
							unitHeaderObject.claimArray = [];
							unitHeaderObject.preAuthOpLineArray = [];
					    	unitHeaderObject.claimOpLineArray = [];
					    	unitHeaderObject.partsInquiryArray = [];
					    	unitHeaderObject.serviceWorkOrderArray = [];
					    	unitHeaderObject.vendorChargebackArray = [];
					    	unitHeaderObject.casesArray = [];
					    	unitHeaderObject.relatedRecordsArray = [];
					    	unitHeaderObject.recallsArray = [];
						}
						
						// initialize the keys that will be set on the Unit header object.
						keys = [{id: 'internalid', text: true}, {id: 'name'}, {id: 'custrecordunit_serialnumber'}, {id: 'custrecordunit_salesorder', text: true}, {id: 'custrecordunit_backlog', text: true}, 
						        {id: 'custrecordunit_dealer', text: true}, {id: 'custrecordunit_series', text: true}, {id: 'custrecordunit_model', text: true}, {id: 'custrecordunit_onlinedate'}, 
						        {id: 'custrecordunit_offlinedate'}, 
						        {id: 'custrecordunit_actualofflinedate'}, {id: 'custrecordunit_location', text: true}, {id: 'custrecordunit_salesrep', text: true}, {id: 'custrecordunit_leftweight'}, 
						        {id: 'custrecordunit_rightweight'}, 
						        {id: 'custrecordunit_hitchweight'}, {id: 'custrecordunit_actualshipweight'}, {id: 'custrecordunit_axleconfiguration'}, {id: 'custrecordunit_shipdate'}, 
						        {id: 'custrecordunit_datecompleted'}, {id: 'created'}, {id: 'custrecordunit_dispatchdate'}, {id: 'custrecordunit_flooringstatus', text: true}, {id: 'custrecordunit_freshwatercapacity'}, 
						        {id: 'custrecordunit_gawrallaxles'}, {id: 'custrecordunit_gawrsingleaxle'}, 
						        {id: 'custrecordgd_unitpaintnotes'}, {id: 'custrecordgd_transportationnotes'}, {id: 'custrecordunit_gvwrlbs'}, {id: 'custrecordunit_graywatercapacity'}, 
						        {id: 'custrecordunit_lpgasweight'}, {id: 'lastmodified'}, {id: 'lastmodifiedby', text: true}, {id: 'custrecordunit_msomodelname'}, 
						        {id: 'custrecordunit_modelyear', text: true}, {id: 'custrecordunit_orderdate'}, {id: 'custrecordunit_originaldealer', text: true}, {id: 'custrecordrvs_originalshipdate'}, 
						        {id: 'custrecordunit_psi'}, {id: 'custrecordunit_productioncompletedate'}, {id: 'custrecordunit_productionrunsortorder'}, {id: 'custrecordunit_status', text: true}, 
						        {id: 'custrecordunit_purchaseordernum'}, {id: 'custrecordunit_qastatus', text: true}, {id: 'custrecordunit_reportedtorviadate'}, {id: 'custrecordunit_retailpurchaseddate'}, 
						        {id: 'custrecordunit_rim'}, {id: 'custrecordunit_salesreptext'}, {id: 'custrecordunit_shippingstatus', text: true}, {id: 'custrecordgd_unit_subseries', text: true}, 
						        {id: 'custrecordunit_tire'}, {id: 'custrecordunit_transportco'}, {id: 'custrecordunit_typeofvehicle', text: true}, {id: 'custrecordunit_uvw'}, 
						        {id: 'custrecordunit_warrantyexpirationdate'}, {id: 'custrecordunit_receiveddate'}, {id: 'custrecordunit_wastewatercapacity'}, {id: 'custrecordunit_waterheatercapacity'}, 
						        {id: 'custrecordrvs_weightdiscrepancyreason'}, {id: 'custrecordyardnotes'}];

						//Set the values in the object
						SetUnitHeaderData(unitHeaderObject, result, keys);
						
						unitIdsArray.push(result.id); // collect the internal ids of the units to use as filter for later searches.
					}

					if (unitHeaderObject.retailCustomerArray.filter(function(data){return data.internalid == result.getValue({name: 'internalid', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT'})}).length == 0) {
						//does not exist yet.
						keys = [{id: 'internalid', text: true, join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT'}, {id: 'name', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT'}, 
						        {id: 'custrecordunitretailcustomer_title', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT'}, {id: 'custrecordunitretailcustomer_firstname', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT'}, 
						        {id: 'custrecordunitretailcustomer_lastname', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT'}, {id: 'custrecordunitretailcustomer_middlename', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT'}, 
						        {id: 'custrecordunitretailcustomer_spouse', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT'}, {id: 'custrecordunitretailcustomer_address1', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT'}, 
						        {id: 'custrecordunitretailcustomer_address2', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT'}, {id: 'custrecordunitretailcustomer_country', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT', text: true}, 
						        {id: 'custrecordunitretailcustomer_city', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT'}, {id: 'custrecordunitretailcustomer_state', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT', text: true}, 
						        {id: 'custrecordunitretailcustomer_zipcode', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT'}, {id: 'custrecordunitretailcustomer_phone', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT'},
						        {id: 'custrecordunitretailcustomer_cellphone', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT'}, {id: 'custrecordunitretailcustomer_email', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT'}, 
						        {id: 'custrecordunitretailcustomer_retailsold', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT'}, {id: 'custrecordunitretailcustomer_registrcvd', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT'},
						        {id: 'custrecordunitretailcustomer_dealsalesrp', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT'}, {id: 'custrecordunitretailcustomer_dsalesrp2', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT'}, 
						        {id: 'custrecordunitretailcustomer_currentcust', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT'}, 
						        {id: 'custrecordunitretailcustomer_dealer', join: 'CUSTRECORDUNITRETAILCUSTOMER_UNIT', text: true}];

						//Set the values in the array
    					SetResultData(unitHeaderObject.retailCustomerArray, result, keys);
					}

					if (unitHeaderObject.fileAttachmentsArray.filter(function(data){return data.internalid == result.getValue({name: 'internalid', join: 'file'})}).length == 0) {
						//does not exist yet.
						keys = [{id: 'internalid', join: 'file'}, {id: 'name', join: 'file'}, {id: 'documentsize', join: 'file'}, {id: 'filetype', join: 'file'}, {id: 'owner', join: 'file', text: true}, 
						        {id: 'description', join: 'file'}, {id: 'created', join: 'file'}];

    					SetResultData(unitHeaderObject.fileAttachmentsArray, result, keys);
					}

					if (unitHeaderObject.appliancesArray.filter(function(data){return data.internalid == result.getValue({name: 'internalid', join: 'CUSTRECORDUNITAPPLIANCES_UNIT'})}).length == 0) {
						//does not exist yet.
						keys = [{id: 'internalid', join: 'CUSTRECORDUNITAPPLIANCES_UNIT'}, {id: 'custrecordunitappliances_type', join: 'CUSTRECORDUNITAPPLIANCES_UNIT', text: true}, 
						        {id: 'custrecordunitappliances_desc', join: 'CUSTRECORDUNITAPPLIANCES_UNIT'}, {id: 'custrecordunitappliances_brandname', join: 'CUSTRECORDUNITAPPLIANCES_UNIT'}, 
						        {id: 'custrecordunitappliances_modelnumber', join: 'CUSTRECORDUNITAPPLIANCES_UNIT'}, {id: 'custrecordunitappliances_serialnumber', join: 'CUSTRECORDUNITAPPLIANCES_UNIT'}, 
						        {id: 'custrecordvendor', join: 'CUSTRECORDUNITAPPLIANCES_UNIT', text: true}];

						//Set the values in the array
    					SetResultData(unitHeaderObject.appliancesArray, result, keys);
					}
    			});
			});
    		
    		// Last unit 
    		unitDataJSONArray.push(unitHeaderObject);

    		// Pre-Auth Search
    		var preAuthSearchObj = search.create({
    			type: 'customrecordrvspreauthorization',
    			filters: [
    			          ['custrecordpreauth_unit.internalid', 'anyof', unitIdsArray]
    			         ],
    			columns:[
    			         search.createColumn({name: 'internalid', label: 'Internal ID'}),
    			         search.createColumn({name: 'name', label: 'Pre-Auth #'}), 
    			         search.createColumn({name: 'custrecordpreauth_customer', label: 'Dealer'}),
    			         search.createColumn({name: 'custrecordpreauth_requestor', label: 'Requestor'}),
    			         search.createColumn({name: 'custrecordpreauth_requestoremail', label: 'Requestor Email Address'}),
    			         search.createColumn({name: 'custrecordpreauth_returnfaxnumber', label: 'Return Fax #'}),
    			         search.createColumn({name: 'custrecordpreauth_series', label: 'Series'}),
    			         search.createColumn({name: 'custrecordpreauth_model', label: 'Model'}),
    			         search.createColumn({name: 'custrecordpreauth_decor', label: 'Decor'}),
    			         search.createColumn({name: 'custrecordpreauth_retailpurchasedate', label: 'Retail Purchase Date'}),
    			         search.createColumn({name: 'custrecordpreauth_status', label: 'Status'}),
    			         search.createColumn({name: 'custrecordpreauth_notes', label: 'Manufacturer Notes'}),
    			         search.createColumn({name: "created", label: "Date Created"}),
    			         search.createColumn({name: 'internalid', join: 'custrecordpreauth_unit', sort: search.Sort.DESC, label: 'Unit ID'})
    			        ]
    		}).runPaged({pageSize: 1000});
    		
    		firstResult = true;
    		var arrIndex = 0;
    		var currentInternalId = 0;
    		
    		preAuthSearchObj.pageRanges.forEach(function(pageRange) {
    			preAuthSearchObj.fetch({index: pageRange.index}).data.forEach(function(result) {
    				currentInternalId = result.getValue({name: 'internalid', join: 'custrecordpreauth_unit'});  // get current unit internal id
    				if (firstResult) {
    					firstResult == false;
    					arrIndex = getIndex(unitDataJSONArray, 'internalid', currentInternalId);
    				} else {
    					// Check if the unit exist in the unit data array already.
    					if (unitDataJSONArray[arrIndex].preAuthArray.internalid != currentInternalId) {
    						arrIndex = getIndex(unitDataJSONArray, 'internalid', currentInternalId);
    					}
    				}

    				// Check if the pre-auth already exist in the array, if it does not, added it.
    				if (unitDataJSONArray[arrIndex].preAuthArray.filter(function(data){return data.internalid == result.getValue({name: 'internalid'})}).length == 0) {
						//does not exist yet.
    					keys = [{id: 'internalid'}, {id: 'custrecordpreauth_customer', text: true}, {id: 'custrecordpreauth_requestor', text: true}, {id: 'custrecordpreauth_requestoremail'}, 
    					        {id: 'custrecordpreauth_returnfaxnumber'}, {id: 'custrecordpreauth_series'}, {id: 'custrecordpreauth_model'}, 
    					        {id: 'custrecordpreauth_decor'}, {id: 'custrecordpreauth_retailpurchasedate'}, {id: 'custrecordpreauth_status', text: true}, {id: 'custrecordpreauth_notes'}, {id: 'created'}];

    					//Set the values in the array
    					SetResultData(unitDataJSONArray[arrIndex].preAuthArray, result, keys);
					}
    			});
    		});

    		// Claim Search
			var claimSearchObj = search.create({
			   type: "customrecordrvsclaim",
			   filters: [
					     ['custrecordclaim_unit.internalid', 'anyof', unitIdsArray]
					    ],
			   columns: [
					      search.createColumn({name: "internalid", label: "Claim #"}),
					      search.createColumn({name: "custrecordclaim_customer", label: "Dealer"}),
					      search.createColumn({name: "custrecordclaim_requestor", label: "Requestor"}),
					      search.createColumn({name: "custrecordclaim_retailcustomername", label: "Retail Customer Name"}),
					      search.createColumn({name: "custrecordclaim_preauthorization", label: "Pre-Authorization"}),
					      search.createColumn({name: "custrecordclaim_unitserialnumber", label: "Unit Serial #"}),
					      search.createColumn({name: "custrecordclaim_unitmodel", label: "Model #"}),
					      search.createColumn({name: "custrecordclaim_claimtotal", label: "Claim Total"}),
					      search.createColumn({name: "custrecordclaim_status", label: "Status"}),
					      search.createColumn({name: "created", label: "Date Created"}),
	    			      search.createColumn({name: 'internalid', join: 'custrecordclaim_unit', sort: search.Sort.DESC, label: 'Unit ID'})
					    ]
			}).runPaged({pageSize: 1000});
			
    		firstResult = true;
    		arrIndex = 0;
    		currentInternalId = 0;
    		
    		claimSearchObj.pageRanges.forEach(function(pageRange) {
    			claimSearchObj.fetch({index: pageRange.index}).data.forEach(function(result) {
    				currentInternalId = result.getValue({name: 'internalid', join: 'custrecordclaim_unit'});
    				if (firstResult) {
    					firstResult == false;
    					arrIndex = getIndex(unitDataJSONArray, 'internalid', currentInternalId);
    				} else {
    					if (unitDataJSONArray[arrIndex].claimArray.internalid != currentInternalId) {
    						arrIndex = getIndex(unitDataJSONArray, 'internalid', currentInternalId);
    					}
    				}

    				// Check if the claim already exist in the array, if it does not, added it.
    				if (unitDataJSONArray[arrIndex].claimArray.filter(function(data){return data.internalid == result.getValue({name: 'internalid'})}).length == 0) {
						//does not exist yet.
    					keys = [{id: 'internalid'}, {id: 'custrecordclaim_customer', text: true}, {id: 'custrecordclaim_requestor', text: true}, {id: 'custrecordclaim_retailcustomername'}, 
    					        {id: 'custrecordclaim_preauthorization'}, {id: 'custrecordclaim_unitserialnumber'}, {id: 'custrecordclaim_unitmodel', text: true}, 
    					        {id: 'custrecordclaim_claimtotal'}, {id: 'custrecordclaim_status', text: true}, {id: 'created'}];

    					//Set the values in the array
    					SetResultData(unitDataJSONArray[arrIndex].claimArray, result, keys);
					}
    			});
    		});

    		// Pre-Auth Op Line Search
			var preauthoperationlineSearchObj = search.create({
			   type: "customrecordrvspreauthoperationline",
			   filters: [
					     ['custrecordpreauthopline_unit', 'anyof', unitIdsArray]
					    ],
			   columns: [
					      search.createColumn({name: "internalid", label: "Operation Line ID"}),
					      search.createColumn({name: "custrecordpreauthopline_flatratecode", label: "Flat Rate Code"}),
					      search.createColumn({name: "altname", join: "CUSTRECORDPREAUTHOPLINE_FLATRATECODE", label: "Description"}),
					      search.createColumn({name: "custrecordpreauthopline_preauth", label: "Pre-Auth"}),
	    			      search.createColumn({name: 'custrecordpreauthopline_unit', sort: search.Sort.DESC, label: 'Unit ID'})
					    ]
			}).runPaged({pageSize: 1000});
			
    		firstResult = true;
    		arrIndex = 0;
    		currentInternalId = 0;
    		
    		preauthoperationlineSearchObj.pageRanges.forEach(function(pageRange) {
    			preauthoperationlineSearchObj.fetch({index: pageRange.index}).data.forEach(function(result) {
    				currentInternalId = result.getValue({name: 'custrecordpreauthopline_unit'});
    				if (firstResult) {
    					firstResult == false;
    					arrIndex = getIndex(unitDataJSONArray, 'internalid', currentInternalId);
    				} else {
    					if (unitDataJSONArray[arrIndex].preAuthOpLineArray.internalid != currentInternalId) {
    						arrIndex = getIndex(unitDataJSONArray, 'internalid', currentInternalId);
    					}
    				}

    				// Check if the preauth op line already exist in the array, if it does not, added it.
    				if (unitDataJSONArray[arrIndex].preAuthOpLineArray.filter(function(data){return data.internalid == result.getValue({name: 'internalid'})}).length == 0) {
						//does not exist yet.
    					keys = [{id: 'internalid'}, {id: 'custrecordpreauthopline_flatratecode', text: true}, {id: 'altname', join: 'CUSTRECORDPREAUTHOPLINE_FLATRATECODE'}, 
    					        {id: 'custrecordpreauthopline_preauth', text: true}];

    					//Set the values in the array
    					SetResultData(unitDataJSONArray[arrIndex].preAuthOpLineArray, result, keys);
					}
    			});
    		});

    		// Claim Op Line Search
    		var claimoperationlineSearchObj = search.create({
 			   type: "customrecordrvsclaimoperationline",
 			   filters: [
 					     ['custrecordclaimopline_unit', 'anyof', unitIdsArray]
 					    ],
 			   columns: [
 					      search.createColumn({name: "internalid", label: "Operation Line ID"}),
 					      search.createColumn({name: "custrecordclaimoperationline_flatratecod", label: "Flat Rate Code"}),
 					      search.createColumn({name: "altname", join: "CUSTRECORDCLAIMOPERATIONLINE_FLATRATECOD", label: "Name"}),
 					      search.createColumn({name: "custrecordclaimoperationline_claim", label: "Claim"}),
 	    			      search.createColumn({name: 'custrecordclaimopline_unit', sort: search.Sort.DESC, label: 'Unit ID'})
 					    ]
 			}).runPaged({pageSize: 1000});
 			
     		firstResult = true;
     		arrIndex = 0;
     		currentInternalId = 0;
     		
     		claimoperationlineSearchObj.pageRanges.forEach(function(pageRange) {
     			claimoperationlineSearchObj.fetch({index: pageRange.index}).data.forEach(function(result) {
     				currentInternalId = result.getValue({name: 'custrecordclaimopline_unit'});
     				if (firstResult) {
     					firstResult == false;
     					arrIndex = getIndex(unitDataJSONArray, 'internalid', currentInternalId);
     				} else {
     					if (unitDataJSONArray[arrIndex].claimOpLineArray.internalid != currentInternalId) {
     						arrIndex = getIndex(unitDataJSONArray, 'internalid', currentInternalId);
     					}
     				}

     				// Check if the claim op line already exist in the array, if it does not, added it.
     				if (unitDataJSONArray[arrIndex].claimOpLineArray.filter(function(data){return data.internalid == result.getValue({name: 'internalid'})}).length == 0) {
 						//does not exist yet.
     					keys = [{id: 'internalid'}, {id: 'custrecordclaimoperationline_flatratecod', text: true}, {id: 'altname', join: 'CUSTRECORDCLAIMOPERATIONLINE_FLATRATECOD'}, 
     					        {id: 'custrecordclaimoperationline_claim', text: true}];

     					//Set the values in the array
     					SetResultData(unitDataJSONArray[arrIndex].claimOpLineArray, result, keys);
 					}
     			});
     		});

     		// Parts Inquiries search
     		var partsinquirySearchObj = search.create({
  			   type: "customrecordgranddesignpartsinquiry",
  			   filters: [
  					     ['custrecordpartsinquiry_unit', 'anyof', unitIdsArray]
  					    ],
  			   columns: [
  					      search.createColumn({name: "internalid", label: "Internal Id"}),
  					      search.createColumn({name: "created", label: "Date Created"}),
  					      search.createColumn({name: "custrecordpartsinquiry_dealer", label: "Dealer"}),
	  				      search.createColumn({name: "custrecordpartsinquiry_requestor", label: "Requestor"}),
	  				      search.createColumn({name: "custrecordpartsinquiry_status", label: "Status"}),
	  				      search.createColumn({name: "lastmodified", label: "Last Modified"}),
	  				      search.createColumn({name: "lastmodifiedby", label: "Last Modified By"}),
  	    			      search.createColumn({name: 'custrecordpartsinquiry_unit', sort: search.Sort.DESC, label: 'Unit ID'})
  					    ]
  			}).runPaged({pageSize: 1000});
  			
      		firstResult = true;
      		arrIndex = 0;
      		currentInternalId = 0;
      		
      		partsinquirySearchObj.pageRanges.forEach(function(pageRange) {
      			partsinquirySearchObj.fetch({index: pageRange.index}).data.forEach(function(result) {
      				currentInternalId = result.getValue({name: 'custrecordpartsinquiry_unit'});
      				if (firstResult) {
      					firstResult == false;
      					arrIndex = getIndex(unitDataJSONArray, 'internalid', currentInternalId);
      				} else {
      					if (unitDataJSONArray[arrIndex].partsInquiryArray.internalid != currentInternalId) {
      						arrIndex = getIndex(unitDataJSONArray, 'internalid', currentInternalId);
      					}
      				}
      				
      				// Check if the parts inquiry already exist in the array, if it does not, added it.
      				if (unitDataJSONArray[arrIndex].partsInquiryArray.filter(function(data){return data.internalid == result.getValue({name: 'internalid'})}).length == 0) {
  						//does not exist yet.
      					keys = [{id: 'internalid'}, {id: 'created'}, {id: 'custrecordpartsinquiry_dealer', text: true}, {id: 'custrecordpartsinquiry_requestor', text: true}, 
      					        {id: 'custrecordpartsinquiry_status', text: true}, {id: 'lastmodified'}, {id: 'lastmodifiedby', text: true}];

      					//Set the values in the array
      					SetResultData(unitDataJSONArray[arrIndex].partsInquiryArray, result, keys);
  					}
      			});
      		});

      		// Service Work Order search
     		var serviceWorkOrderSearchObj = search.create({
  			   type: "customrecordsrv_serviceworkorder",
  			   filters: [
  					     ['custrecordsrv_swo_unit', 'anyof', unitIdsArray],
  					     'AND',
  					     ["isinactive","is",'F']
  					    ],
  			   columns: [
  					      search.createColumn({name: "internalid", label: "ID"}),
  					      search.createColumn({name: "custrecordsrv_swo_gdstatus", label: "Status"}),
	  				      search.createColumn({name: "custrecordsrv_swo_dealer", label: "Dealer"}),
	  				      search.createColumn({name: "custrecordsrv_swo_custordernum", label: "Customer Order Number"}),
	  				      search.createColumn({name: "custrecordsrv_swo_deliverymethod", label: "Delivery Method"}),
	  				      search.createColumn({name: "custrecordsrv_swo_apptdate", label: "Appointment Date"}),
	  				      search.createColumn({name: "custrecordsrv_swo_expectedcompletedate", label: "Expected Completion Date"}),
	  				      search.createColumn({name: "custrecordsrv_swo_completedate", label: "Date Work Completed"}),
	  				      search.createColumn({name: "custrecordsrv_swo_comments", label: "Comments"}),
	  				      search.createColumn({name: "custrecordsrv_swo_claim", label: "Claim"}),
	  				      search.createColumn({name: "custrecordsrv_swo_gdcase", label: "Case"}),
	  				      search.createColumn({name: "custrecordsrv_swo_warrpartsorder", label: "Warranty Sub-Parts Order"}),
	  				      search.createColumn({name: "custrecordsrv_swo_totalamount", label: "Total Amount"}),
  	    			      search.createColumn({name: 'custrecordsrv_swo_unit', sort: search.Sort.DESC, label: 'Unit ID'})
  					    ]
  			}).runPaged({pageSize: 1000});
  			
      		firstResult = true;
      		arrIndex = 0;
      		currentInternalId = 0;
      		
      		serviceWorkOrderSearchObj.pageRanges.forEach(function(pageRange) {
      			serviceWorkOrderSearchObj.fetch({index: pageRange.index}).data.forEach(function(result) {
      				currentInternalId = result.getValue({name: 'custrecordsrv_swo_unit'});
      				if (firstResult) {
      					firstResult == false;
      					arrIndex = getIndex(unitDataJSONArray, 'internalid', currentInternalId);
      				} else {
      					if (unitDataJSONArray[arrIndex].serviceWorkOrderArray.internalid != currentInternalId) {
      						arrIndex = getIndex(unitDataJSONArray, 'internalid', currentInternalId);
      					}
      				}
      				// Check if the service work order already exist in the array, if it does not, added it.
      				if (unitDataJSONArray[arrIndex].serviceWorkOrderArray.filter(function(data){return data.internalid == result.getValue({name: 'internalid'})}).length == 0) {
  						//does not exist yet.
      					keys = [{id: 'internalid'}, {id: 'custrecordsrv_swo_gdstatus', text: true}, {id: 'custrecordsrv_swo_unit', text: true}, {id: 'custrecordsrv_swo_dealer', text: true}, 
      					        {id: 'custrecordsrv_swo_custordernum'}, {id: 'custrecordsrv_swo_deliverymethod', text: true}, {id: 'custrecordsrv_swo_apptdate'}, 
      					        {id: 'custrecordsrv_swo_expectedcompletedate'}, {id: 'custrecordsrv_swo_completedate'}, {id: 'custrecordsrv_swo_comments'}, 
      					        {id: 'custrecordsrv_swo_claim', text: true}, {id: 'custrecordsrv_swo_gdcase', text: true}, {id: 'custrecordsrv_swo_warrpartsorder'}, {id: 'custrecordsrv_swo_totalamount'}];

      					//Set the values in the array
      					SetResultData(unitDataJSONArray[arrIndex].serviceWorkOrderArray, result, keys);
  					}
      			});
      		});

      		// Vendor Charge-back search
     		var vendorChargebackSearchObj = search.create({
  			   type: "customrecordrvsvendorchargeback",
  			   filters: [
  					     ['custrecordvcb_unit', 'anyof', unitIdsArray],
  					     'AND',
  					     ["isinactive","is",'F']
  					    ],
  			   columns: [
  					      search.createColumn({name: "internalid", label: "ID"}),
  					      search.createColumn({name: "custrecordvcb_claim", label: "Claim"}),
	  				      search.createColumn({name: "custrecordvcb_vendor", label: "Vendor"}),
	  				      search.createColumn({name: "custrecordvcb_status", label: "Status"}),
	  				      search.createColumn({name: "custrecordvcb_billcredit", label: "Bill Credit"}),
	  				      search.createColumn({name: "custrecordvcb_unit", sort: search.Sort.DESC, label: "Unit"})
  					    ]
  			}).runPaged({pageSize: 1000});
  			
      		firstResult = true;
      		arrIndex = 0;
      		currentInternalId = 0;
      		
      		vendorChargebackSearchObj.pageRanges.forEach(function(pageRange) {
      			vendorChargebackSearchObj.fetch({index: pageRange.index}).data.forEach(function(result) {
      				currentInternalId = result.getValue({name: 'custrecordvcb_unit'});
      				if (firstResult) {
      					firstResult == false;
      					arrIndex = getIndex(unitDataJSONArray, 'internalid', currentInternalId);
      				} else {
      					if (unitDataJSONArray[arrIndex].vendorChargebackArray.internalid != currentInternalId) {
      						arrIndex = getIndex(unitDataJSONArray, 'internalid', currentInternalId);
      					}
      				}
      				// Check if the vendor charge-back already exist in the array, if it does not, added it.
      				if (unitDataJSONArray[arrIndex].vendorChargebackArray.filter(function(data){return data.internalid == result.getValue({name: 'internalid'})}).length == 0) {
  						//does not exist yet.
      					keys = [{id: 'internalid'}, {id: 'custrecordvcb_claim', text: true}, {id: 'custrecordvcb_vendor', text: true}, {id: 'custrecordvcb_status', text: true}, 
      					        {id: 'custrecordvcb_billcredit', text: true}, {id: 'custrecordvcb_unit', text: true}];

      					//Set the values in the array
      					SetResultData(unitDataJSONArray[arrIndex].vendorChargebackArray, result, keys);
  					}
      			});
      		});

      		// Case search
     		var casesSearchObj = search.create({
  			   type: "supportcase",
  			   filters: [
  					     ['custeventgd_vinnumber', 'anyof', unitIdsArray],
  					     'AND',
  					     ["isinactive","is",'F']
  					    ],
  			   columns: [
  					      search.createColumn({name: "casenumber", label: "Number"}),
  					      search.createColumn({name: "title", label: "Subject"}),
	  				      search.createColumn({name: "status", label: "Status"}),
	  				      search.createColumn({name: "custeventgd_createdby", label: "Created By"}),
	  				      search.createColumn({name: "createddate", label: "Date Created"}),
	  				      search.createColumn({name: "lastmodifieddate", label: "Last Modified"}),
	  				      search.createColumn({name: "lastmessagedate", label: "Last Message Date"}),
	  				      search.createColumn({name: "enddate", label: "Date Closed"}),
	  				      search.createColumn({name: "lastreopeneddate", label: "Last Reopened"}),
	  				      search.createColumn({name: "custeventgd_vinnumber", sort: search.Sort.DESC, label: "Unit Id"})
  					    ]
  			}).runPaged({pageSize: 1000});
  			
      		firstResult = true;
      		arrIndex = 0;
      		currentInternalId = 0;
      		
      		casesSearchObj.pageRanges.forEach(function(pageRange) {
      			casesSearchObj.fetch({index: pageRange.index}).data.forEach(function(result) {
      				currentInternalId = result.getValue({name: 'custeventgd_vinnumber'});
      				if (firstResult) {
      					firstResult == false;
      					arrIndex = getIndex(unitDataJSONArray, 'internalid', currentInternalId);
      				} else {
      					if (unitDataJSONArray[arrIndex].casesArray.internalid != currentInternalId) {
      						arrIndex = getIndex(unitDataJSONArray, 'internalid', currentInternalId);
      					}
      				}
      				
      				// Check if the cases already exist in the array, if it does not, added it.
      				if (unitDataJSONArray[arrIndex].casesArray.filter(function(data){return data.internalid == result.getValue({name: 'casenumber'})}).length == 0) {
  						//does not exist yet.
      					keys = [{id: 'casenumber'}, {id: 'title'}, {id: 'status', text: true}, {id: 'custeventgd_createdby'}, {id: 'createddate'}, {id: 'lastmodifieddate'}, {id: 'lastmessagedate'}, 
      					        {id: 'enddate'}, {id: 'lastreopeneddate'}];

      					//Set the values in the array
      					SetResultData(unitDataJSONArray[arrIndex].casesArray, result, keys);
  					}
      			});
      		});

      		// Related Records search
     		var relatedRecordsSearchObj = search.create({
  			   type: "transaction",
  			   filters: [
  					     ['custbodyrvsunit', 'anyof', unitIdsArray],
  					     'AND',
  					     ["mainline","is",'T']
  					    ],
  			   columns: [
  					      search.createColumn({name: "internalid", label: "ID"}),
  					      search.createColumn({name: "trandate", label: "Date"}),
  					      search.createColumn({name: "type", label: "Type"}),
  					      search.createColumn({name: "tranid", label: "Document Number"}),
  					      search.createColumn({name: "entity", label: "Name"}),
  					      search.createColumn({name: "memo", label: "Memo"}),
  					      search.createColumn({name: "amount", label: "Amount"}),
  					      search.createColumn({name: "statusref", label: "Status"}),
	  				      search.createColumn({name: "custbodyrvsunit", sort: search.Sort.DESC, label: "Unit Id"})
  					    ]
  			}).runPaged({pageSize: 1000});
  			
      		firstResult = true;
      		arrIndex = 0;
      		currentInternalId = 0;
      		
      		relatedRecordsSearchObj.pageRanges.forEach(function(pageRange) {
      			relatedRecordsSearchObj.fetch({index: pageRange.index}).data.forEach(function(result) {
      				currentInternalId = result.getValue({name: 'custbodyrvsunit'});
      				if (firstResult) {
      					firstResult == false;
      					arrIndex = getIndex(unitDataJSONArray, 'internalid', currentInternalId);
      				} else {
      					if (unitDataJSONArray[arrIndex].relatedRecordsArray.internalid != currentInternalId) {
      						arrIndex = getIndex(unitDataJSONArray, 'internalid', currentInternalId);
      					}
      				}

      				// Check if the related records already exist in the array, if it does not, added it.
      				if (unitDataJSONArray[arrIndex].relatedRecordsArray.filter(function(data){return data.internalid == result.getValue({name: 'internalid'})}).length == 0) {
  						//does not exist yet.
      					keys = [{id: 'internalid'}, {id: 'trandate'}, {id: 'type', text: true}, {id: 'tranid'}, {id: 'entity', text: true}, {id: 'memo'}, {id: 'amount'}, {id: 'statusref'}];

      					//Set the values in the array
      					SetResultData(unitDataJSONArray[arrIndex].relatedRecordsArray, result, keys);
  					}
      			});
      		});

      		// Recalls search
     		var recallsSearchObj = search.create({
  			   type: "customrecordrvs_recallunit",
  			   filters: [
  					     ['custrecordrecallunit_unit', 'anyof', unitIdsArray],
  					     'AND',
  					     ["isinactive","is",'F']
  					    ],
  			   columns: [
  					      search.createColumn({name: "internalid", label: "Internal Id"}),
	  				      search.createColumn({name: "custrecordrecallunit_recallcode", label: "Recall Code"}),
	  				      search.createColumn({name: "custrecordrecallunit_date", label: "Date Added"}),
	  				      search.createColumn({name: "custrecordrecallunit_claim", label: "Claim Number"}),
	  				      search.createColumn({name: "custrecordrecallunit_status", label: "Status"}),
	  				      search.createColumn({name: "custrecordrecallunit_unit", sort: search.Sort.DESC, label: "Unit Id"})
  					    ]
  			}).runPaged({pageSize: 1000});
  			
      		firstResult = true;
      		arrIndex = 0;
      		currentInternalId = 0;
      		
      		recallsSearchObj.pageRanges.forEach(function(pageRange) {
      			recallsSearchObj.fetch({index: pageRange.index}).data.forEach(function(result) {
      				currentInternalId = result.getValue({name: 'custrecordrecallunit_unit'});
      				if (firstResult) {
      					firstResult == false;
      					arrIndex = getIndex(unitDataJSONArray, 'internalid', currentInternalId);
      				} else {
      					if (unitDataJSONArray[arrIndex].recallsArray.internalid != currentInternalId) {
      						arrIndex = getIndex(unitDataJSONArray, 'internalid', currentInternalId);
      					}
      				}

      				// Check if the recalls already exist in the array, if it does not, added it.
      				if (unitDataJSONArray[arrIndex].recallsArray.filter(function(data){return data.internalid == result.getValue({name: 'internalid'})}).length == 0) {
  						//does not exist yet.
      					keys = [{id: 'internalid'}, {id: 'custrecordrecallunit_recallcode', text: true}, {id: 'custrecordrecallunit_date'}, {id: 'custrecordrecallunit_claim'}, 
      					        {id: 'custrecordrecallunit_status'}];
      					
      					//Set the values in the array
      					SetResultData(unitDataJSONArray[arrIndex].recallsArray, result, keys);
  					}
      			});
      		});
      		
        	return unitDataJSONArray;
    	}
    	catch(e) {
    		log.debug('error: ' + (unitIdsArray.length > 0 ? unitIdsArray[unitIdsArray.length - 1] : 'unitIdsArray is empty'), e);
    	}
    	return [];
    }

    /**
     * Executes when the map entry point is triggered and applies to each key/value pair.
     *
     * @param {MapSummary} context - Data collection containing the key/value pairs to process through the map stage
     * @since 2015.1
     */
    function map(context) {
    	var unitJSON = JSON.parse(context.value);
    	var currentScript =  runtime.getCurrentScript();
    	
    	// Check if the PDF check box parameter on the Deployment script is set
    	if (currentScript.getParameter({name:'custscriptgd_outputispdf'})) {
    		GenerateDataFilesInPDF(unitJSON, currentScript.getParameter({name: 'custscriptgd_internalidforpdffiles'}));  // Pass the object and the folder ID
    	}
    	// Check if the Excel check box parameter on the Deployment script is set
    	if (currentScript.getParameter({name:'custscriptgd_outputisexcel'})) {
    		GenerateDataFilesInExcel(unitJSON, currentScript.getParameter({name: 'custscriptgd_internalidforexcelfiles'})); // Pass the object and the folder ID
    	}
    }

    /**
     * Executes when the reduce entry point is triggered and applies to each group.
     *
     * @param {ReduceSummary} context - Data collection containing the groups to process through the reduce stage
     * @since 2015.1
     */
    function reduce(context) {

    }


    /**
     * Executes when the summarize entry point is triggered and applies to the result set.
     *
     * @param {Summary} summary - Holds statistics regarding the execution of a map/reduce script
     * @since 2015.1
     */
    function summarize(summary) {

    }
    
    /**
     * Generates Unit Data output in PDF format. 
     */
    function GenerateDataFilesInPDF(unitJSON, folderId) {
    	var xmlString = '';
    	var xmlStringTest = '';
    	try{
    		var renderer = render.create();

    		renderer.setTemplateByScriptId('CUSTTMPLGD_UNITDATATEMPLATE');
    		
    		renderer.addRecord('record',
	    		record.load({
	    			type: 'customrecordrvsunit',
	    			id: unitJSON.internalid
		    }));
    		renderer.addCustomDataSource({
    		    format: render.DataSource.OBJECT,
    		    alias: "unitJSON",
    		    data: unitJSON
    		});
    		
    		// Convert to PDF
        	var unitDataPDF = renderer.renderAsPdf();
        	var timeStamp = getFormattedTime();
        	unitDataPDF.name =  unitJSON.name + '_' + timeStamp + '.pdf';
        	
        	// Set folder ID and save to the File Cabinet
        	unitDataPDF.folder = folderId;
        	unitDataPDF.save();
    	} catch (err) {
        	var timeStamp = getFormattedTime();
    		
    		var fileObj = file.create({
				name: unitJSON.name + '_' + timeStamp + '.txt',
				fileType: file.Type.PLAINTEXT,
	    		contents: renderer.renderAsString(),
			});
			
			// Set folder ID and save to the File Cabinet
			fileObj.folder = folderId;
			fileObj.save();
    		log.debug('PDF name', unitJSON.name + '_' + timeStamp + '.txt');
    		log.debug('PDF error VIN: ' + unitJSON.name, err);
    	}
    }
    
    /**
     * Generates Unit Data output in Excel format. 
     */
    function GenerateDataFilesInExcel(unitJSON, folderId) {
    	var xmlString = '';
    	var xmlStringTest = '';
    	try{
	    	xmlString = '<?xml version="1.0"?><?mso-application progid="Excel.Sheet"?>'
				    		+ '<Workbook xmlns="urn:schemas-microsoft-com:office:spreadsheet" '
				    		+ 'xmlns:o="urn:schemas-microsoft-com:office:office" '
				    		+ 'xmlns:x="urn:schemas-microsoft-com:office:excel" '
				    		+ 'xmlns:ss="urn:schemas-microsoft-com:office:spreadsheet" '
				    		+ 'xmlns:html="http://www.w3.org/TR/REC-html40">'
				    		+ '<Styles>'
				    		+ '<Style ss:ID="s23">'
				    		+ '<Alignment ss:Vertical="Bottom" ss:Rotate="90"/>'
				    		+ '<Borders>'
				    		+ '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>'
				    		+ '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>'
				    		+ '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>'
				    		+ '<Border ss:Position="Top" ss:LineStyle="Continuous" ss:Weight="1"/>'
				    		+ '</Borders>'
				    		+ '<Interior ss:Color="#c4ffc6" ss:Pattern="Solid"/>'
				    		+ '</Style>'
				    		+ '<Style ss:ID="s24">'
				    		+ '<Borders>'
				    		+ '<Border ss:Position="Bottom" ss:LineStyle="Continuous" ss:Weight="1"/>'
				    		+ '<Border ss:Position="Left" ss:LineStyle="Continuous" ss:Weight="1"/>'
				    		+ '<Border ss:Position="Right" ss:LineStyle="Continuous" ss:Weight="1"/>'
				    		+ '<Border ss:Position="Top" ss:LineStyle="Continuous" ss:Weight="1"/>'
				    		+ '</Borders>'
				    		+ '<Interior ss:Color="#c4ffc6" ss:Pattern="Solid"/>'
				    		+ '</Style>'
				    		+ '</Styles>';
	    	
	    	xmlStringTest = xmlString;
	    	
	    	// Add Unit Header Tab
	    	var headersArray = ['Name', 'Serial Number', 'Sales Order', 'Backlog', 'Dealer', 'Series', 'Model', 'Online Date', 'Scheduled Offline Date', 'Actual Offline Date', 'Location', 'Sales Rep', 'Left Weight (Lbs)', 
	     	                    'Right Weight (Lbs)', 'Hitch Weight (Lbs)', 'Actual Ship Weight', 'Axle Configuration', 'Current Ship Date', 'Date Completed', 'Date Created', 'Dispatch Date', 'Flooring Status', 
	     	                    'Fresh Water Capacity (Gal)', 'GAWR (All Axles) Lbs', 'GAWR (Single Axle) (Lbs)', 'GD Paint Notes',
	     	                    'GD Transportation Notes', 'GVWR Lbs', 'Gray Water Capacity (Gal)', 'LP Gas Weight (Lbs)', 'Last Modified', 'Last Modified By', 'MSO Model Name', 
	     	                    'Model Year', 'Order Date', 'Original Dealer', 'Original Ship Date', 'PSI', 'Production Complete Date', 'Production Run Sort Order', 'Production Status', 
	     	                    'Purchase Order #', 'QA Status', 'Reported To RVIA Date', 'Retail Sold Date', 'Rim', 'Sales Rep (Text-Only)', 'Shipping Status', 'Sub Series', 
	     	                    'Tire', 'Transport Co.', 'Type of Vehicle', 'UVW (Lbs)', 'Warranty Expiration Date', 'Warranty Registration Received Date', 'Waste Water Capacity (Gal)', 
	     	                    'Water Heater Capacity (Gal)', 'Weight Discrepancy Reason', 'Yard Notes'];

	    	// Set the tab name and the headers of the WorkSheet.
	    	xmlString = AddExcelWorkSheetName(xmlString, 'Unit', headersArray);

	    	xmlString += '<Row>';
	    	for (var key in unitJSON) {
	    	    if (unitJSON.hasOwnProperty(key) && typeof unitJSON[key] == 'string' && key != 'internalid') {
	    	    	xmlString += '<Cell><Data ss:Type="String">' + unitJSON[key] + '</Data></Cell>';
	    	    }
	    	}
	    	xmlString += '</Row></Table></Worksheet>';
	    	
	    	// Add Retail Customer Tab
	    	headersArray = ['ID', 'Name', 'Title', 'First Name', 'Last Name', 'Middle Name', 'Spouse', 'Address 1', 'Address 2', 'Country', 
	    	                'City', 'State', 'Zipcode', 'Phone #', 'Cell Phone', 'Email', 'Retail Sold Date', 'Registration Received Date', 
	    	                'Dealer Sales Rep', 'Secondary Dealer Sales Rep', 'Current Customer', 'Dealer'];
	    	
	    	xmlString = AddExcelWorkSheetName(xmlString, 'Unit Retail Customer', headersArray);
	    	xmlString = AddExcelRowValues(xmlString, unitJSON.retailCustomerArray);
	    	
	    	// Add File Attachments Tab
	    	headersArray = ['ID', 'Name', 'Size (KB)', 'Type', 'Owner', 'Description', 'Date Created'];
	    	
	    	xmlString = AddExcelWorkSheetName(xmlString, 'File Attachments', headersArray);
	    	xmlString = AddExcelRowValues(xmlString, unitJSON.fileAttachmentsArray);
	    	
	    	// Add Appliances Tab
	    	headersArray = ['ID', 'Type', 'Description', 'Brand Name', 'Model #', 'Serial #', 'Vendor'];
	    	
	    	xmlString = AddExcelWorkSheetName(xmlString, 'Appliances', headersArray);
	    	xmlString = AddExcelRowValues(xmlString, unitJSON.appliancesArray);
	    	
	    	// Add Pre-Auth Tab
	    	headersArray = ['Pre-Auth #', 'Dealer', 'Requestor', 'Requestor Email Address', 'Return Fax #', 'Series', 'Model', 'Decor', 'Retail Purchase Date', 'Status', 'Manufacturer Notes', 'Date Created'];
	    	
	    	xmlString = AddExcelWorkSheetName(xmlString, 'Pre-Auth', headersArray);
	    	xmlString = AddExcelRowValues(xmlString, unitJSON.preAuthArray);
	    	
	    	// Add Claim Tab
	    	headersArray = ['Claim #', 'Dealer', 'Requestor', 'Retail Customer Name', 'Pre-Authorization', 'Unit Serial #', 'Model #', 'Claim Total', 'Status', 'Date Created'];
	    	
	    	xmlString = AddExcelWorkSheetName(xmlString, 'Claim', headersArray);
	    	xmlString = AddExcelRowValues(xmlString, unitJSON.claimArray);
	    	
	    	// Add Pre-Auth Flat Rate Codes By Unit Tab
	    	headersArray = ['Internal Id', 'Flat Rate Code', 'Description', 'Pre-Auth'];
	    	
	    	xmlString = AddExcelWorkSheetName(xmlString, 'Pre-Auth| Flat Rate Codes', headersArray);
	    	xmlString = AddExcelRowValues(xmlString, unitJSON.preAuthOpLineArray);
	    	
	    	// Add Claim Flat Rate Codes By Unit Tab
	    	headersArray = ['Internal Id', 'Flat Rate Code', 'Description', 'Claim'];
	    	
	    	xmlString = AddExcelWorkSheetName(xmlString, 'Claim| Flat Rate Codes', headersArray);
	    	xmlString = AddExcelRowValues(xmlString, unitJSON.claimOpLineArray);
	    	
	    	// Add Parts Inquiry Tab
	    	headersArray = ['Internal Id', 'Date Created', 'Dealer', 'Requestor', 'Status', 'Last Modified', 'Last Modified By'];
	    	
	    	xmlString = AddExcelWorkSheetName(xmlString, 'Parts Inquiry', headersArray);
	    	xmlString = AddExcelRowValues(xmlString, unitJSON.partsInquiryArray);
	    	
	    	// Add Service Work Order Tab
	    	headersArray = ['ID', 'Status', 'Unit', 'Dealer', 'Customer Order Number', 'Delivery Method', 'Appointment Date', 'Expected Completion Date', 'Date Work Completed', 'Comments', 'Claim', 'Case', 
	    	                'Warranty Sub-Parts Order', 'Total Amount'];
	    	
	    	xmlString = AddExcelWorkSheetName(xmlString, 'Service Workorders', headersArray);
	    	xmlString = AddExcelRowValues(xmlString, unitJSON.serviceWorkOrderArray);
			      
	    	// Add Vender Charge-back Tab
	    	headersArray = ['ID', 'Claim', 'Vendor', 'Status', 'Bill Credit', 'Unit'];
	    	
	    	xmlString = AddExcelWorkSheetName(xmlString, 'Vendor Chargebacks', headersArray);
	    	xmlString = AddExcelRowValues(xmlString, unitJSON.vendorChargebackArray);
		    
	    	// Add Cases Tab
	    	headersArray = ['Number', 'Title', 'Status', 'Created By', 'Created', 'Last Modified', 'Last Message Date', 'Date Closed', 'Last Re-Opened'];
	    	
	    	xmlString = AddExcelWorkSheetName(xmlString, 'Cases', headersArray);
	    	xmlString = AddExcelRowValues(xmlString, unitJSON.casesArray);
	    	
	    	// Add Related Records Tab
	    	headersArray = ['ID', 'Date', 'Type', 'Document Number', 'Name', 'Memo', 'Amount', 'Status'];
	    	
	    	xmlString = AddExcelWorkSheetName(xmlString, 'Related Records', headersArray);
	    	xmlString = AddExcelRowValues(xmlString, unitJSON.relatedRecordsArray);
	    	
	    	// Add Recalls Tab
	    	headersArray = ['ID', 'Recall Code', 'Date Added', 'Claim Number', 'Status'];
	    	
	    	xmlString = AddExcelWorkSheetName(xmlString, 'Recalls', headersArray);
	    	xmlString = AddExcelRowValues(xmlString, unitJSON.recallsArray);

	    	xmlString += '</Workbook>';

	    	// encode to base64 so we can create an excel file.
	    	var strXmlEncoded = encode.convert({
	    		string : xmlString,
	    		inputEncoding : encode.Encoding.UTF_8,
	    		outputEncoding : encode.Encoding.BASE_64
	    	});
	    	
	    	// Make a unique name and create the file
			var timeStamp = getFormattedTime();
			var fileObj = file.create({
				name: unitJSON.name + '_' + timeStamp + '.xls',
				fileType: file.Type.EXCEL,
	    		contents: strXmlEncoded,
			});
			
			// Set folder ID and save to the File Cabinet
			fileObj.folder = folderId;
			fileObj.save();
    	} catch (err) {
    		// If for any reason there was an error, create a text version of the file and save it in the folder.
			var fileObj = file.create({
				name: unitJSON.name + '_' + timeStamp + '.txt',
				fileType: file.Type.PLAINTEXT,
	    		contents: xmlString,
			});
			
			// Set folder ID and save to the File Cabinet
			fileObj.folder = folderId;
			fileObj.save();
    		log.debug('name', unitJSON.name + '_' + timeStamp + '.txt');
    		log.debug('error VIN: ' + unitJSON.name, err);
    	}
    }
    
    /**
     * This method adds the value rows for the excel sheet
     * @param xmlExcelString
     * @param valuesArray
     */
    function AddExcelRowValues(xmlExcelString, valuesArray) {
    	for (var i = 0; i < valuesArray.length; i++) {
    		
    		xmlExcelString += '<Row>';
    		
    		for (var key in valuesArray[i]) {
        	    if (valuesArray[i].hasOwnProperty(key)) {
        	    	xmlExcelString += '<Cell><Data ss:Type="String">' + valuesArray[i][key] + '</Data></Cell>';
        	    }
        	}
    		xmlExcelString += '</Row>';
    	}
    	
    	xmlExcelString += '</Table></Worksheet>';
    	
    	return xmlExcelString;
    }
    
    /**
     * Initialize Worksheet Tab
     */
    function AddExcelWorkSheetName(xmlExcelString, tabName, headers, isUsingHeaderClass) {
    	xmlExcelString += '<Worksheet ss:Name="' + tabName + '"><Table>';
    	xmlExcelString += '<Column ss:AutoFitWidth="0" ss:Width="60"/>';
    	xmlExcelString += '<Column ss:AutoFitWidth="0" ss:Width="57"/>';
    	xmlExcelString += '<Row>';
    	var headerClass = 's23';
    	headerClass = isUsingHeaderClass ? headerClass : 's24';
    	for (var i = 0; i < headers.length; i++) {
    		xmlExcelString +='<Cell ss:StyleID="' + headerClass + '"><Data ss:Type="String">' + headers[i] + '</Data></Cell>';
    	}
        xmlExcelString += '</Row>';
        
        return xmlExcelString;
    }
    
    /**
     * Adds the result data into the array.
     */
    function SetResultData(dataArray, result, keys) {
    	var dataObject = {};

        for (var i = 0; i < keys.length; i++) {
        	dataObject[keys[i].id] = xml.escape({xmlText: (keys[i].text ? result.getText({name : keys[i].id, join: keys[i].join}) : result.getValue({name : keys[i].id, join: keys[i].join})).toString() || ''});
        }
    	
        dataArray.push(dataObject);
    }
    
    /**
     * Set unit header data in the header object.
     */
    function SetUnitHeaderData(unitHeaderObject, result, keys) {
        for (var i = 0; i < keys.length; i++) {
        	unitHeaderObject[keys[i].id] = xml.escape({xmlText: (keys[i].text ? result.getText({name : keys[i].id, join: keys[i].join}) : result.getValue({name : keys[i].id, join: keys[i].join})).toString() || ''});
        }
    }

    /**
     * return a date and time stamp we can use in a filename
     */
    function getFormattedTime() {
    	var today = new Date();
        var y = today.getFullYear();
        // JavaScript months are 0-based.
        var m = today.getMonth() + 1;
        var d = today.getDate();
        var h = today.getHours();
        var mi = today.getMinutes();
        var s = today.getSeconds();
        return y + "-" + m + "-" + d + "-" + h + "-" + mi + "-" + s;
    }
    
    /**
     * Return the first index where the value is found from the array of objects, else return -1
     */
    function getIndex(searchArray, key, value) {
        for (var i = 0; i < searchArray.length; i++) {
            if (searchArray[i][key] === value) {
                return i;
            }
        }
        return -1;
    }

    return {
        getInputData: getInputData,
        map: map,
        reduce: reduce,
        summarize: summarize
    };
    
});
