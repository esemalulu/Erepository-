/**
 * Requested on 7/19/2016 to make sure select transactions being saved by the user
 * is NOT outside of accounting period.  Transaction Date (trandate) must always match 
 * the accounting period.  NetSuite by default will sync accounting period based on trandate entered.
 *  it WILL also default to earliest closed accounting period.  
 *  For example, Trand Date of 7/19/2016 will automatically set accounting period to July 2016 
 *  	- AS LONG AS July 2016 period is OPEN.
 *  	- If CLOSED, netsuite will set the accounting period to earliest OPEN period. 
 *  		in this case it will be August 2016 (as long as it's open).
 *  
 *  This script make sure tran date matches the accounting period. 
 *  Keep in mind that we are using script to block this type of action via script 
 *  	instead of native account preference setting because other BU that does NOT 
 *  	currently sync with Aqueduct CAN put in back dated transactions that posts to currently open period.
 *  
 * - Deployed Against:
 * 		Vendor Bills, Vendor Payments, Customer Payments, Customer Invoices, 
 * 		Credit Memos, Journal Entries, Intercompany journal entries,
 * 		Book specific journal entires, Book specific intercompany journal entires
 * 
 * - Will execute against List of subsidiaries defined in Setup > Company > General Preferences > Custom Preferences Subtab
 * 		- AQUEDUCT-EPS JOURNAL FILE BU IDS values
 * 			This is comma separated list of Internal IDs of BUs
 * 
 * 8/5/2016
 * - Issue was discovered WHEN user COPYs a Journal record from NetSuite
 * 	Some of the default checked NS/EPS values are being initialized to previous.
 * 	We use client script to handle this.
 * 	Following Fields are checked and UNCHECKED if type is CREATE or COPY
 * 	custbody_nseps_senttoeps (TRX Sent to EPS)
 *  custbody_nseps_datamigrelated (Initial Data Migration)
 *  custbody_nseps_genbyaqueduct (Generated By Aqueduct)
 *  
 * 
 * Version    Date            Author           Remarks
 * 1.00       20 Jul 2016     json
 *
 */

/**
 * Added 8/5/2016 to address Journal copy/create 
 *  and make sure All Integration related fields are unchecked.
 * 	custbody_nseps_senttoeps (TRX Sent to EPS)
 *  custbody_nseps_datamigrelated (Initial Data Migration)
 *  custbody_nseps_genbyaqueduct (Generated By Aqueduct)
 */
function trxPageIniti(type)
{
	//ONLY trigger when type is copy or create
	if (type == 'create' || type == 'copy')
	{
		var valCheckFlds = ['custbody_nseps_senttoeps',			//TRX Sent to EPS
		                    'custbody_nseps_datamigrelated',	//Initial Data Migration
		                    'custbody_nseps_genbyaqueduct'];	//Generated By Aqueduct
		
		for (var f=0; f < valCheckFlds.length; f+=1)
		{
			//If the field is checked, we uncheck it.
			if (nlapiGetFieldValue(valCheckFlds[f]) == 'T')
			{
				//We need to UNCHECK it
				nlapiSetFieldValue(valCheckFlds[f],'F');
			}
		}
	}
}

/**
 * The recordType (internal id) corresponds to the "Applied To" record in your script deployment. 
 * @appliedtorecord recordType
 *   
 * @returns {Boolean} True to continue save, false to abort save
 */
function trxSaveRecord()
{
	//We are going to execute this only against userinterface
	if (nlapiGetContext().getExecutionContext() == 'userinterface')
	{
		//Let's check to see if subsidiary matches
		var paramListOfBuIds = nlapiGetContext().getSetting('SCRIPT', 'custscript_sb84_flbuids'),
			trxSubsId = nlapiGetFieldValue('subsidiary');
		
		//Go through and make sure spaces before and after are removed for each element
		paramListOfBuIds = paramListOfBuIds.split(',');
		for (var p=0; paramListOfBuIds && p < paramListOfBuIds.length; p+=1)
		{
			//strTrim removes empty spaces before and after the string
			paramListOfBuIds[p] = strTrim(paramListOfBuIds[p]);
		}
		
		//continue ONLY when subsidiary is one of paramListOfBuIds
		if (!paramListOfBuIds.contains(trxSubsId))
		{
			return true;
		}
		
		var acctPrdText = nlapiGetFieldText('postingperiod'),
			//Undocumented Native NetSuite Field
			//pp_s stands for posting period start.
			//NetSuite behind the scene uses this on the client side 
			//to generate alert message. 
			//	 We are using same value instead of looking up the value.
			acctPrdStartDate = nlapiGetFieldValue('pp_s'),
			acctPrdEndDate = nlapiGetFieldValue('pp_e'),
			tranDateVal = nlapiGetFieldValue('trandate');
		
		if (nlapiStringToDate(tranDateVal) < nlapiStringToDate(acctPrdStartDate) || 
			nlapiStringToDate(tranDateVal) > nlapiStringToDate(acctPrdEndDate) )
		{
			alert(
				'You are attempting to post a transaction that is outside of the posting period '+
				acctPrdText+'.'+
				'\n\n'+
				'Please enter a date within the posting period and re-submit the record.'
			);
			
			return false;
		}
	}
	return true;
}
