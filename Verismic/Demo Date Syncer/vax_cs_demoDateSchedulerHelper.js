/**
 * Module Description
 * 
 * Version    Date            Author           Remarks
 * 1.00       30 Nov 2015     json
 *
 */

//LIST of JSON objects generated by SL that can be access by client script
//acctjson, locjson, serjson, projson, tzjson

/**
 * The recordType (internal id) corresponds to the "Applied To" record in your script deployment. 
 * @appliedtorecord recordType 
 * 
 * @param {String} type Access mode: create, copy, edit
 * @returns {Void}
 */
function ddslPageInit(type)
{
	//Need to populate list of opportunities for THIS customer
	//Call out Helper SUitelet and grab related engagements
	//customscript_ax_sl_getoppbycustomer
	//customdeploy_ax_sl_getoppbycustomer
	//customerid
	var slUrl = nlapiResolveURL(
					'SUITELET', 
					'customscript_ax_sl_getoppbycustomer', 
					'customdeploy_ax_sl_getoppbycustomer', 
					'view'
				)+
				'&customerid='+
				nlapiGetFieldValue('custpage_lpcid');
			
	var resobj = nlapiRequestURL(slUrl);
	var resJson = JSON.parse(resobj.getBody());
	
	nlapiRemoveSelectOption('custpage_custopp', null);
	
	if (!resJson.success)
	{
		//Since there are NO Opportunities, default to Save & Create Opportunity 
		//and disable it
		nlapiSetFieldValue('custpage_nextaction','saveandopp');
		nlapiDisableField('custpage_nextaction',true);
		
		//disable opportunity field as well
		nlapiDisableField('custpage_custopp',true);
	}
	else
	{
		nlapiInsertSelectOption('custpage_custopp', '', ' ', true);
		for(var j in resJson.opps)
		{
			nlapiInsertSelectOption('custpage_custopp', j, resJson.opps[j], false);
		}
	}

	//TODO: THIS MUST BE CHANGED ONCE LIVE TO PROD
	//Setster Sandbox Info
	//Need to map out subsidiary to location and have it set automatically.
	//NetSuite: UK = 4, US = 2
	//Setster: UK = 22131, US = 22117
	
	//Setster Production Info
	//Need to map out subsidiary to location and have it set automatically.
	//NetSuite: UK = 4, US = 2
	//Setster: UK = 19859, US = 19730
	
	
	var NsSetMap = {
		'4':'19859',
		'2':'19730',
		'1':'19730' // If 1, default to US
	};
	
	//1. Set location
	nlapiSetFieldValue('custpage_location',NsSetMap[nlapiGetContext().getSubsidiary()], true, true);
	//nlapiDisableField('custpage_location', true);
	
}

/**
 * The recordType (internal id) corresponds to the "Applied To" record in your script deployment. 
 * @appliedtorecord recordType
 *   
 * @returns {Boolean} True to continue save, false to abort save
 */
function ddslSaveRecord()
{

	//Need to add in validation for Next Step actions
	var nextAction = nlapiGetFieldValue('custpage_nextaction'),
		oppSelection = nlapiGetFieldValue('custpage_custopp');
	if (nextAction == 'save' && !oppSelection)
	{
		alert('Please select an Opportunity to update');
		return false;
	}
	
    return true;
}

/**
 * The recordType (internal id) corresponds to the "Applied To" record in your script deployment. 
 * @appliedtorecord recordType
 * 
 * @param {String} type Sublist internal id
 * @param {String} name Field internal id
 * @param {Number} linenum Optional line item number, starts from 1
 * @returns {Void}
 */
function ddslFieldChanged(type, name, linenum)
{
	//Monitor Contact List change
	if (name == 'custpage_contactlist')
	{
		if (!nlapiGetFieldValue(name))
		{
			//clear out the contact email
			nlapiSetFieldValue('custpage_email','');
		}
		else
		{
			//Grab Email from contactjson
			nlapiSetFieldValue('custpage_email', contactjson[nlapiGetFieldValue(name)].email);
		}
	}
	
	//Monitor Location Change
	if (name == 'custpage_location')
	{
		locationFldChanged(name);
	}
	
	//Monitor Service change
	if (name == 'custpage_service')
	{
		serviceFldChanged(name);
	}
	
	//Monitor Provider Change
	if (name == 'custpage_provider')
	{
		providerFldChanged(name);
	}
	
	//Monitor Date change
	if (name == 'custpage_date' || name=='custpage_clitz')
	{
		if (name == 'custpage_clitz')
		{
			nlapiSetFieldValue('custpage_clitztext', nlapiGetFieldText(name));
		}
		
		//Trigger look up ONLY if all 4 fields are set
		if (nlapiGetFieldValue('custpage_clitz') && nlapiGetFieldValue('custpage_location') &&
			nlapiGetFieldValue('custpage_service') && nlapiGetFieldValue('custpage_provider'))
		{
			
			//Trigger Next available dates lookup
			var wvaUrl = nlapiResolveURL('SUITELET', 'customscript_ax_sl_demodatesetsterapi', 'customdeploy_ax_sl_demodatesetsterapi', 'VIEW')+
						    '&custparam_provider='+nlapiGetFieldValue('custpage_provider')+
							'&custparam_service='+nlapiGetFieldValue('custpage_service')+
							'&custparam_location='+nlapiGetFieldValue('custpage_location')+
							'&custparam_action=availdates'+
							'&custparam_timezone='+nlapiGetFieldValue('custpage_clitz')+
							'&custparam_session='+nlapiGetFieldValue('custpage_ssession');
			
			var wvaRes = nlapiRequestURL(wvaUrl);
			var wvaResJson = JSON.parse(wvaRes.getBody());
			//IF status is true display next available dates
			if (wvaResJson.status)
			{
				var arDates = wvaResJson.data,
					displayVal = '';
				
				for (var d=0; d < arDates.length; d+=1)
				{
					displayVal += arDates[d];
					
					if ((d+1)%3==0)
					{
						displayVal +='<br/>';
					}
					else
					{
						displayVal +=', ';
					}
				}
				
				nlapiSetFieldValue('custpage_nextdates', displayVal);
			}
			
			
			//Trigger TIME Drop down value for specific date if Date is filled in.
			if (nlapiGetFieldValue('custpage_date'))
			{
				var apiDateFormat = nlapiStringToDate(nlapiGetFieldValue('custpage_date'));
				apiDateFormat = apiDateFormat.getFullYear()+
								'-'+
								(apiDateFormat.getMonth()+1)+
								'-'+
								apiDateFormat.getDate();
				
				var avaUrl = nlapiResolveURL('SUITELET', 'customscript_ax_sl_demodatesetsterapi', 'customdeploy_ax_sl_demodatesetsterapi', 'VIEW')+
							 '&custparam_date='+apiDateFormat+
							 '&custparam_provider='+nlapiGetFieldValue('custpage_provider')+
							 '&custparam_service='+nlapiGetFieldValue('custpage_service')+
							 '&custparam_location='+nlapiGetFieldValue('custpage_location')+
							 '&custparam_action=availability'+
							 '&custparam_timezone='+nlapiGetFieldValue('custpage_clitz')+
							 '&custparam_session='+nlapiGetFieldValue('custpage_ssession');
				
				var avaRes = nlapiRequestURL(avaUrl);
				var avaResJson = JSON.parse(avaRes.getBody());
				//IF status is true go through and populate the Time drop down.
				//	Time drop down is available time FOR the date selected
				if (avaResJson.status)
				{
					nlapiRemoveSelectOption('custpage_time', null);
					nlapiInsertSelectOption('custpage_time', '', '', true);
					
					nlapiSetFieldValue('custpage_duration','');
					
					//Check to see if data element exist
					if (avaResJson.data)
					{
						nlapiSetFieldValue('custpage_duration', avaResJson.data.interval);
						
						//Only ONE Date element will return
						for (var t in avaResJson.data.times)
						{
							var arTimes = avaResJson.data.times[t];
							
							//Go through each available time and add it in as am/pm TEXT
							if (!arTimes || (arTimes && arTimes.length == 0) || (arTimes && arTimes.length > 0 && !arTimes[0]))
							{
								alert('There are no available time for this date. Please select another date');
							}
							else
							{
								for(var t=0; t < arTimes.length; t+=1)
								{
									var optionValue = arTimes[t];
									var optionText = arTimes[t];
									
									if (optionText)
									{
										optionText = convertToAmPm(optionText);
										
										//Add it into option
										nlapiInsertSelectOption('custpage_time', optionValue, optionText, false);
									}
								}
							}
						}
					}
				}
			}
			
		}
		//else
		//{
		//	alert('Both Date and Client Timezone values must be set');
		//}
	}
	
	//Monitor Demo Type changes
	if (name == 'custpage_demotype')
	{
		if (nlapiGetFieldValue(name))
		{
			nlapiSetFieldValue(
				'custpage_demotypetext', 
				nlapiGetFieldText(name)
			);
		}
		else
		{
			nlapiSetFieldValue('custpage_demotypetext','');
		}
	}
	
	//Monitor Appt Time changes
	if (name == 'custpage_time')
	{
		if (nlapiGetFieldValue(name))
		{
			nlapiSetFieldValue(
				'custpage_timetext', 
				nlapiGetFieldText(name)
			);
		}
		else
		{
			nlapiSetFieldValue('custpage_timetext','');
		}
	}
		
	if (name == 'custpage_nextaction')
	{
		//Empty out the Opporutnity first
		nlapiSetFieldValue('custpage_custopp','');
		
		//If next action is save and update, open up the opportunity field
		//If not, disable it
		if (nlapiGetFieldValue(name)=='save')
		{
			nlapiDisableField('custpage_custopp', false);
		}
		else
		{
			nlapiDisableField('custpage_custopp', true);
		}
		
	}
	
}

/*********** Helper Functions ************/

function providerFldChanged(name)
{
	nlapiSetFieldValue('custpage_provideremail', '');
	
	nlapiSetFieldValue('custpage_providertext', '');
	
	//For Demo Tech Link
	//nlapiSetFieldValue('custpage_demotechrclink','');
	
	nlapiSetFieldValue('custpage_date', '');
	
	nlapiSetFieldValue('custpage_time','');
	
	//projson.data is an array. We need to loop through each
	if (nlapiGetFieldValue(name))
	{
		for (var pd=0; pd < projson.data.length; pd+=1)
		{
			if (nlapiGetFieldValue(name) == projson.data[pd].id)
			{
				//Match Found
				nlapiSetFieldValue('custpage_provideremail', projson.data[pd].email);
				
				//For Demo Tech Link
				//Set the custpage_demotechrclink 
				//if (prorlcjson[projson.data[pd].email])
				//{
					//var demoTechRclink = strGlobalReplace(prorlcjson[projson.data[pd].email], "||", "\\r");
				//	nlapiSetFieldValue('custpage_demotechrclink', prorlcjson[projson.data[pd].email]);
				//}
				
			}
		}
		
		nlapiSetFieldValue('custpage_providertext', nlapiGetFieldText(name));
	}
}

function serviceFldChanged(name)
{
	nlapiSetFieldValue('custpage_servicetext','');
	
	nlapiRemoveSelectOption('custpage_provider', null);
	nlapiInsertSelectOption('custpage_provider', '', '', true);
	
	nlapiSetFieldValue('custpage_providertext', '');
	nlapiSetFieldValue('custpage_provideremail', '');
	
	if (nlapiGetFieldValue(name))
	{
		nlapiSetFieldValue('custpage_servicetext', nlapiGetFieldText(name));
		
		//Loop through projson object and add in employees available for Selected Service
		for (var p=0; p < projson.data.length; p+=1)
		{
			var providerId = projson.data[p].id,
				providerName = projson.data[p].name;
			
			//for each provider, service is defined as location_links: {"22117 (Location ID)":{"40449 (Service ID)":1,"40485":1}}
			for (var ll in projson.data[p].location_links)
			{
				var locSerJson = projson.data[p].location_links[ll];
				
				//Service MUST be under location selected as well
				if (locSerJson[nlapiGetFieldValue(name)] && ll == nlapiGetFieldValue('custpage_location'))
				{
					//This service exists for THIS location
					nlapiInsertSelectOption('custpage_provider', providerId, providerName, false);
					break;
				}
			}
		}
	}
}


/**
 * Function to handle when location field changes.
 * name should be internal ID of location field
 */
function locationFldChanged(name)
{
	nlapiSetFieldValue('custpage_locationtext','');
	
	nlapiRemoveSelectOption('custpage_service', null);
	nlapiInsertSelectOption('custpage_service', '', '', true);
	nlapiSetFieldValue('custpage_servicetext','');
	
	nlapiRemoveSelectOption('custpage_provider', null);
	nlapiInsertSelectOption('custpage_provider', '', '', true);
	nlapiSetFieldValue('custpage_provideremail', '');
	nlapiSetFieldValue('custpage_providertext', '');
	
	
	nlapiRemoveSelectOption('custpage_time', null);
	nlapiInsertSelectOption('custpage_time', '', '', true);
	
	nlapiSetFieldValue('custpage_duration','');
	
	nlapiSetFieldValue('custpage_loctz','');
	
	
	if (nlapiGetFieldValue(name))
	{
		//Set Location Text
		nlapiSetFieldValue('custpage_locationtext', nlapiGetFieldText(name));
		
		//Loop through serjson object and add in services available for THIS selected location.
		for (var s=0; s < serjson.data.length; s+=1)
		{
			var serviceId = serjson.data[s].id,
				serviceName = serjson.data[s].name;
			//for each service location is defined as location_links":{"20784 (Employee ID)":{"22117 (Location ID)":1},"20801":{"22131":1}}
			for (var ll in serjson.data[s].location_links)
			{
				var locEmpJson = serjson.data[s].location_links[ll];
				if (locEmpJson[nlapiGetFieldValue(name)])
				{
					//This service exists for THIS location
					nlapiInsertSelectOption('custpage_service', serviceId, serviceName, false);
					break;
				}
			}
		}
		
		//Grab Timezone information of selected location.
		//locjson.data is an array of location objects. Need to loop through to find matching OBJ
		for (var ld=0; ld < locjson.data.length; ld+=1)
		{
			if (nlapiGetFieldValue(name) == locjson.data[ld].id)
			{
				//Found the match.
				//Need to look up Timezone info.
				//If the location is using company timezone, it will have value of 0 for timezone_id element
				var locTzId = locjson.data[ld].timezone_id;
				if (locTzId == '0')
				{
					//Grab Timezone id of account
					locTzId = acctjson.data.timezone_id;
				}
				
				//Look up Tz Detail
				if (locTzId)
				{
					nlapiSetFieldValue(
						'custpage_loctz', 
						tzjson.data[locTzId].caption, 
						true, 
						true
					);
				}
				
				break;
			}
		}
		
	}
}

/**
 * Navigate back to Lead page
 */
function cancelGoBack()
{
	var gobackUrl = nlapiResolveURL('RECORD', nlapiGetFieldValue('custpage_lpctype'), nlapiGetFieldValue('custpage_lpcid'), 'VIEW');
	window.location.href = nsDomain+gobackUrl;
}